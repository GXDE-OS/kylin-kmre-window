// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KmreCore.proto

#include "KmreCore.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace cn {
namespace kylinos {
namespace kmre {
namespace kmrecore {
PROTOBUF_CONSTEXPR InstallApp::InstallApp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.file_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.package_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct InstallAppDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstallAppDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstallAppDefaultTypeInternal() {}
  union {
    InstallApp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstallAppDefaultTypeInternal _InstallApp_default_instance_;
PROTOBUF_CONSTEXPR UninstallApp::UninstallApp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.package_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct UninstallAppDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UninstallAppDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UninstallAppDefaultTypeInternal() {}
  union {
    UninstallApp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UninstallAppDefaultTypeInternal _UninstallApp_default_instance_;
PROTOBUF_CONSTEXPR LaunchApp::LaunchApp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.package_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fullscreen_)*/false
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_.density_)*/0} {}
struct LaunchAppDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaunchAppDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaunchAppDefaultTypeInternal() {}
  union {
    LaunchApp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaunchAppDefaultTypeInternal _LaunchApp_default_instance_;
PROTOBUF_CONSTEXPR CloseApp::CloseApp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.app_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.package_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.force_kill_)*/false} {}
struct CloseAppDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CloseAppDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CloseAppDefaultTypeInternal() {}
  union {
    CloseApp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CloseAppDefaultTypeInternal _CloseApp_default_instance_;
PROTOBUF_CONSTEXPR GetInstalledAppList::GetInstalledAppList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.include_hide_app_)*/false} {}
struct GetInstalledAppListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetInstalledAppListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetInstalledAppListDefaultTypeInternal() {}
  union {
    GetInstalledAppList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetInstalledAppListDefaultTypeInternal _GetInstalledAppList_default_instance_;
PROTOBUF_CONSTEXPR GetRunningAppList::GetRunningAppList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.with_thumbnail_)*/false} {}
struct GetRunningAppListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRunningAppListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRunningAppListDefaultTypeInternal() {}
  union {
    GetRunningAppList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRunningAppListDefaultTypeInternal _GetRunningAppList_default_instance_;
PROTOBUF_CONSTEXPR SetClipboard::SetClipboard(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct SetClipboardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetClipboardDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetClipboardDefaultTypeInternal() {}
  union {
    SetClipboard _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetClipboardDefaultTypeInternal _SetClipboard_default_instance_;
PROTOBUF_CONSTEXPR FocusWin::FocusWin(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.focus_win_)*/0} {}
struct FocusWinDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FocusWinDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FocusWinDefaultTypeInternal() {}
  union {
    FocusWin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FocusWinDefaultTypeInternal _FocusWin_default_instance_;
PROTOBUF_CONSTEXPR ControlApp::ControlApp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.package_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.display_id_)*/0
  , /*decltype(_impl_.event_type_)*/0
  , /*decltype(_impl_.event_value_)*/0} {}
struct ControlAppDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlAppDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlAppDefaultTypeInternal() {}
  union {
    ControlApp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlAppDefaultTypeInternal _ControlApp_default_instance_;
PROTOBUF_CONSTEXPR InsertFile::InsertFile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mime_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct InsertFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InsertFileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InsertFileDefaultTypeInternal() {}
  union {
    InsertFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InsertFileDefaultTypeInternal _InsertFile_default_instance_;
PROTOBUF_CONSTEXPR RemoveFile::RemoveFile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mime_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct RemoveFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveFileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveFileDefaultTypeInternal() {}
  union {
    RemoveFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveFileDefaultTypeInternal _RemoveFile_default_instance_;
PROTOBUF_CONSTEXPR RequestMediaFiles::RequestMediaFiles(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/0} {}
struct RequestMediaFilesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestMediaFilesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestMediaFilesDefaultTypeInternal() {}
  union {
    RequestMediaFiles _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestMediaFilesDefaultTypeInternal _RequestMediaFiles_default_instance_;
PROTOBUF_CONSTEXPR DragFile::DragFile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.file_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.package_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.display_id_)*/0
  , /*decltype(_impl_.has_double_display_)*/false} {}
struct DragFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DragFileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DragFileDefaultTypeInternal() {}
  union {
    DragFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DragFileDefaultTypeInternal _DragFile_default_instance_;
PROTOBUF_CONSTEXPR RotationChanged::RotationChanged(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.package_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.display_id_)*/0
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_.rotation_)*/0} {}
struct RotationChangedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RotationChangedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RotationChangedDefaultTypeInternal() {}
  union {
    RotationChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RotationChangedDefaultTypeInternal _RotationChanged_default_instance_;
PROTOBUF_CONSTEXPR SetSystemProp::SetSystemProp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_field_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_type_)*/0} {}
struct SetSystemPropDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetSystemPropDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetSystemPropDefaultTypeInternal() {}
  union {
    SetSystemProp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetSystemPropDefaultTypeInternal _SetSystemProp_default_instance_;
PROTOBUF_CONSTEXPR GetSystemProp::GetSystemProp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_field_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_type_)*/0} {}
struct GetSystemPropDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSystemPropDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSystemPropDefaultTypeInternal() {}
  union {
    GetSystemProp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSystemPropDefaultTypeInternal _GetSystemProp_default_instance_;
PROTOBUF_CONSTEXPR UpdateAppWindowSize::UpdateAppWindowSize(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.package_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.display_id_)*/0
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0} {}
struct UpdateAppWindowSizeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateAppWindowSizeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateAppWindowSizeDefaultTypeInternal() {}
  union {
    UpdateAppWindowSize _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateAppWindowSizeDefaultTypeInternal _UpdateAppWindowSize_default_instance_;
PROTOBUF_CONSTEXPR SetProxy::SetProxy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.host_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.open_)*/false
  , /*decltype(_impl_.port_)*/0} {}
struct SetProxyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetProxyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetProxyDefaultTypeInternal() {}
  union {
    SetProxy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetProxyDefaultTypeInternal _SetProxy_default_instance_;
PROTOBUF_CONSTEXPR UpdateDisplaySize::UpdateDisplaySize(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.display_id_)*/0
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0} {}
struct UpdateDisplaySizeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateDisplaySizeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateDisplaySizeDefaultTypeInternal() {}
  union {
    UpdateDisplaySize _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateDisplaySizeDefaultTypeInternal _UpdateDisplaySize_default_instance_;
PROTOBUF_CONSTEXPR AnswerCall::AnswerCall(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.answer_)*/false} {}
struct AnswerCallDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnswerCallDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnswerCallDefaultTypeInternal() {}
  union {
    AnswerCall _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnswerCallDefaultTypeInternal _AnswerCall_default_instance_;
PROTOBUF_CONSTEXPR ContainerEnvBootStatus::ContainerEnvBootStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.err_info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/false} {}
struct ContainerEnvBootStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContainerEnvBootStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContainerEnvBootStatusDefaultTypeInternal() {}
  union {
    ContainerEnvBootStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContainerEnvBootStatusDefaultTypeInternal _ContainerEnvBootStatus_default_instance_;
PROTOBUF_CONSTEXPR ActionResult::ActionResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.org_cmd_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.err_info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_)*/false} {}
struct ActionResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionResultDefaultTypeInternal() {}
  union {
    ActionResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionResultDefaultTypeInternal _ActionResult_default_instance_;
PROTOBUF_CONSTEXPR EventInfo::EventInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.package_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_id_)*/0} {}
struct EventInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventInfoDefaultTypeInternal() {}
  union {
    EventInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventInfoDefaultTypeInternal _EventInfo_default_instance_;
PROTOBUF_CONSTEXPR InstalledAppItem::InstalledAppItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.app_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.package_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_code_)*/int64_t{0}} {}
struct InstalledAppItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstalledAppItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstalledAppItemDefaultTypeInternal() {}
  union {
    InstalledAppItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstalledAppItemDefaultTypeInternal _InstalledAppItem_default_instance_;
PROTOBUF_CONSTEXPR InstalledAppList::InstalledAppList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_)*/{}
  , /*decltype(_impl_.size_)*/0} {}
struct InstalledAppListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstalledAppListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstalledAppListDefaultTypeInternal() {}
  union {
    InstalledAppList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstalledAppListDefaultTypeInternal _InstalledAppList_default_instance_;
PROTOBUF_CONSTEXPR RunningAppItem::RunningAppItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.app_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.package_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct RunningAppItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RunningAppItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RunningAppItemDefaultTypeInternal() {}
  union {
    RunningAppItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RunningAppItemDefaultTypeInternal _RunningAppItem_default_instance_;
PROTOBUF_CONSTEXPR RunningAppList::RunningAppList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_)*/{}
  , /*decltype(_impl_.size_)*/0} {}
struct RunningAppListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RunningAppListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RunningAppListDefaultTypeInternal() {}
  union {
    RunningAppList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RunningAppListDefaultTypeInternal _RunningAppList_default_instance_;
PROTOBUF_CONSTEXPR Notification::Notification(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.package_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.display_id_)*/0
  , /*decltype(_impl_.hide_)*/false
  , /*decltype(_impl_.incoming_call_)*/false} {}
struct NotificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotificationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotificationDefaultTypeInternal() {}
  union {
    Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotificationDefaultTypeInternal _Notification_default_instance_;
PROTOBUF_CONSTEXPR LaunchResult::LaunchResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.app_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.package_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.display_id_)*/0
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_.density_)*/0
  , /*decltype(_impl_.result_)*/false
  , /*decltype(_impl_.fullscreen_)*/false
  , /*decltype(_impl_.exists_)*/false
  , /*decltype(_impl_.app_resumed_)*/false} {}
struct LaunchResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaunchResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaunchResultDefaultTypeInternal() {}
  union {
    LaunchResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaunchResultDefaultTypeInternal _LaunchResult_default_instance_;
PROTOBUF_CONSTEXPR CloseResult::CloseResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.package_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_)*/false} {}
struct CloseResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CloseResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CloseResultDefaultTypeInternal() {}
  union {
    CloseResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CloseResultDefaultTypeInternal _CloseResult_default_instance_;
PROTOBUF_CONSTEXPR VirtualScreenFocusResult::VirtualScreenFocusResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.display_id_)*/0
  , /*decltype(_impl_.result_)*/false} {}
struct VirtualScreenFocusResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VirtualScreenFocusResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VirtualScreenFocusResultDefaultTypeInternal() {}
  union {
    VirtualScreenFocusResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VirtualScreenFocusResultDefaultTypeInternal _VirtualScreenFocusResult_default_instance_;
PROTOBUF_CONSTEXPR InputMethodRequest::InputMethodRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.package_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.display_id_)*/0
  , /*decltype(_impl_.ret_)*/false
  , /*decltype(_impl_.x_pos_)*/0
  , /*decltype(_impl_.y_pos_)*/0} {}
struct InputMethodRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InputMethodRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InputMethodRequestDefaultTypeInternal() {}
  union {
    InputMethodRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InputMethodRequestDefaultTypeInternal _InputMethodRequest_default_instance_;
PROTOBUF_CONSTEXPR SingleFile::SingleFile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mime_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.package_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct SingleFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleFileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleFileDefaultTypeInternal() {}
  union {
    SingleFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleFileDefaultTypeInternal _SingleFile_default_instance_;
PROTOBUF_CONSTEXPR FilesList::FilesList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_)*/{}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.size_)*/0} {}
struct FilesListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FilesListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FilesListDefaultTypeInternal() {}
  union {
    FilesList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FilesListDefaultTypeInternal _FilesList_default_instance_;
PROTOBUF_CONSTEXPR MediaPlayStatus::MediaPlayStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.result_)*/false} {}
struct MediaPlayStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MediaPlayStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MediaPlayStatusDefaultTypeInternal() {}
  union {
    MediaPlayStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MediaPlayStatusDefaultTypeInternal _MediaPlayStatus_default_instance_;
PROTOBUF_CONSTEXPR AppMultiplier::AppMultiplier(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.package_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.multiplier_)*/0} {}
struct AppMultiplierDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppMultiplierDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppMultiplierDefaultTypeInternal() {}
  union {
    AppMultiplier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppMultiplierDefaultTypeInternal _AppMultiplier_default_instance_;
PROTOBUF_CONSTEXPR AppMultiplierList::AppMultiplierList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_)*/{}
  , /*decltype(_impl_.size_)*/0} {}
struct AppMultiplierListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppMultiplierListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppMultiplierListDefaultTypeInternal() {}
  union {
    AppMultiplierList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppMultiplierListDefaultTypeInternal _AppMultiplierList_default_instance_;
PROTOBUF_CONSTEXPR Info::Info(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.package_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value3_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value4_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value1_)*/0
  , /*decltype(_impl_.value2_)*/0} {}
struct InfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InfoDefaultTypeInternal() {}
  union {
    Info _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InfoDefaultTypeInternal _Info_default_instance_;
PROTOBUF_CONSTEXPR GetInfoList::GetInfoList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_)*/{}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.size_)*/0} {}
struct GetInfoListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetInfoListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetInfoListDefaultTypeInternal() {}
  union {
    GetInfoList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetInfoListDefaultTypeInternal _GetInfoList_default_instance_;
PROTOBUF_CONSTEXPR ResponseInfo::ResponseInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.package_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_id_)*/0
  , /*decltype(_impl_.ret_)*/0} {}
struct ResponseInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseInfoDefaultTypeInternal() {}
  union {
    ResponseInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseInfoDefaultTypeInternal _ResponseInfo_default_instance_;
PROTOBUF_CONSTEXPR MultiplierSwitch::MultiplierSwitch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.package_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_id_)*/0
  , /*decltype(_impl_.enable_)*/false} {}
struct MultiplierSwitchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiplierSwitchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiplierSwitchDefaultTypeInternal() {}
  union {
    MultiplierSwitch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiplierSwitchDefaultTypeInternal _MultiplierSwitch_default_instance_;
PROTOBUF_CONSTEXPR LinkOpen::LinkOpen(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct LinkOpenDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LinkOpenDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LinkOpenDefaultTypeInternal() {}
  union {
    LinkOpen _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LinkOpenDefaultTypeInternal _LinkOpen_default_instance_;
PROTOBUF_CONSTEXPR UpdatePackageStatus::UpdatePackageStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.package_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.type_)*/0} {}
struct UpdatePackageStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdatePackageStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdatePackageStatusDefaultTypeInternal() {}
  union {
    UpdatePackageStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdatePackageStatusDefaultTypeInternal _UpdatePackageStatus_default_instance_;
PROTOBUF_CONSTEXPR SendSystemProp::SendSystemProp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_field_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_type_)*/0} {}
struct SendSystemPropDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendSystemPropDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendSystemPropDefaultTypeInternal() {}
  union {
    SendSystemProp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendSystemPropDefaultTypeInternal _SendSystemProp_default_instance_;
PROTOBUF_CONSTEXPR EventSequence::EventSequence(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.notification_)*/nullptr
  , /*decltype(_impl_.event_info_)*/nullptr
  , /*decltype(_impl_.launch_result_)*/nullptr
  , /*decltype(_impl_.close_result_)*/nullptr
  , /*decltype(_impl_.set_clipboard_)*/nullptr
  , /*decltype(_impl_.focus_result_)*/nullptr
  , /*decltype(_impl_.inputmethod_request_)*/nullptr
  , /*decltype(_impl_.files_list_)*/nullptr
  , /*decltype(_impl_.mediaplay_status_)*/nullptr
  , /*decltype(_impl_.app_multipliers_)*/nullptr
  , /*decltype(_impl_.response_info_)*/nullptr
  , /*decltype(_impl_.multiplier_switch_)*/nullptr
  , /*decltype(_impl_.link_open_)*/nullptr
  , /*decltype(_impl_.update_package_status_)*/nullptr
  , /*decltype(_impl_.system_prop_)*/nullptr
  , /*decltype(_impl_.get_info_list_)*/nullptr
  , /*decltype(_impl_.container_env_boot_status_)*/nullptr} {}
struct EventSequenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventSequenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventSequenceDefaultTypeInternal() {}
  union {
    EventSequence _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventSequenceDefaultTypeInternal _EventSequence_default_instance_;
}  // namespace kmrecore
}  // namespace kmre
}  // namespace kylinos
}  // namespace cn
static ::_pb::Metadata file_level_metadata_KmreCore_2eproto[45];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_KmreCore_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_KmreCore_2eproto = nullptr;

const uint32_t TableStruct_KmreCore_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::InstallApp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::InstallApp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::InstallApp, _impl_.file_name_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::InstallApp, _impl_.app_name_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::InstallApp, _impl_.package_name_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::UninstallApp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::UninstallApp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::UninstallApp, _impl_.package_name_),
  0,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::LaunchApp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::LaunchApp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::LaunchApp, _impl_.package_name_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::LaunchApp, _impl_.fullscreen_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::LaunchApp, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::LaunchApp, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::LaunchApp, _impl_.density_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::CloseApp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::CloseApp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::CloseApp, _impl_.app_name_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::CloseApp, _impl_.package_name_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::CloseApp, _impl_.force_kill_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::GetInstalledAppList, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::GetInstalledAppList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::GetInstalledAppList, _impl_.include_hide_app_),
  0,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::GetRunningAppList, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::GetRunningAppList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::GetRunningAppList, _impl_.with_thumbnail_),
  0,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::SetClipboard, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::SetClipboard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::SetClipboard, _impl_.content_),
  0,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::FocusWin, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::FocusWin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::FocusWin, _impl_.focus_win_),
  0,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::ControlApp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::ControlApp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::ControlApp, _impl_.display_id_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::ControlApp, _impl_.package_name_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::ControlApp, _impl_.event_type_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::ControlApp, _impl_.event_value_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::InsertFile, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::InsertFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::InsertFile, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::InsertFile, _impl_.mime_type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::RemoveFile, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::RemoveFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::RemoveFile, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::RemoveFile, _impl_.mime_type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::RequestMediaFiles, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::RequestMediaFiles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::RequestMediaFiles, _impl_.type_),
  0,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::DragFile, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::DragFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::DragFile, _impl_.file_path_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::DragFile, _impl_.package_name_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::DragFile, _impl_.display_id_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::DragFile, _impl_.has_double_display_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::RotationChanged, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::RotationChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::RotationChanged, _impl_.display_id_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::RotationChanged, _impl_.package_name_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::RotationChanged, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::RotationChanged, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::RotationChanged, _impl_.rotation_),
  1,
  0,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::SetSystemProp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::SetSystemProp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::SetSystemProp, _impl_.event_type_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::SetSystemProp, _impl_.value_field_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::SetSystemProp, _impl_.value_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::GetSystemProp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::GetSystemProp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::GetSystemProp, _impl_.event_type_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::GetSystemProp, _impl_.value_field_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::UpdateAppWindowSize, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::UpdateAppWindowSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::UpdateAppWindowSize, _impl_.package_name_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::UpdateAppWindowSize, _impl_.display_id_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::UpdateAppWindowSize, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::UpdateAppWindowSize, _impl_.height_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::SetProxy, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::SetProxy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::SetProxy, _impl_.open_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::SetProxy, _impl_.host_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::SetProxy, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::SetProxy, _impl_.type_),
  2,
  0,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::UpdateDisplaySize, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::UpdateDisplaySize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::UpdateDisplaySize, _impl_.display_id_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::UpdateDisplaySize, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::UpdateDisplaySize, _impl_.height_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::AnswerCall, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::AnswerCall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::AnswerCall, _impl_.answer_),
  0,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::ContainerEnvBootStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::ContainerEnvBootStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::ContainerEnvBootStatus, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::ContainerEnvBootStatus, _impl_.err_info_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::ActionResult, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::ActionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::ActionResult, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::ActionResult, _impl_.org_cmd_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::ActionResult, _impl_.err_info_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::EventInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::EventInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::EventInfo, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::EventInfo, _impl_.package_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::InstalledAppItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::InstalledAppItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::InstalledAppItem, _impl_.app_name_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::InstalledAppItem, _impl_.package_name_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::InstalledAppItem, _impl_.version_code_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::InstalledAppItem, _impl_.version_name_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::InstalledAppItem, _impl_.app_info_),
  0,
  1,
  4,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::InstalledAppList, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::InstalledAppList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::InstalledAppList, _impl_.item_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::InstalledAppList, _impl_.size_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::RunningAppItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::RunningAppItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::RunningAppItem, _impl_.app_name_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::RunningAppItem, _impl_.package_name_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::RunningAppList, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::RunningAppList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::RunningAppList, _impl_.item_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::RunningAppList, _impl_.size_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::Notification, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::Notification, _impl_.package_name_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::Notification, _impl_.app_name_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::Notification, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::Notification, _impl_.display_id_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::Notification, _impl_.hide_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::Notification, _impl_.incoming_call_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::Notification, _impl_.title_),
  0,
  1,
  2,
  4,
  5,
  6,
  3,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::LaunchResult, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::LaunchResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::LaunchResult, _impl_.app_name_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::LaunchResult, _impl_.package_name_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::LaunchResult, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::LaunchResult, _impl_.display_id_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::LaunchResult, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::LaunchResult, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::LaunchResult, _impl_.density_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::LaunchResult, _impl_.fullscreen_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::LaunchResult, _impl_.exists_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::LaunchResult, _impl_.app_resumed_),
  0,
  1,
  6,
  2,
  3,
  4,
  5,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::CloseResult, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::CloseResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::CloseResult, _impl_.package_name_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::CloseResult, _impl_.result_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::VirtualScreenFocusResult, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::VirtualScreenFocusResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::VirtualScreenFocusResult, _impl_.display_id_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::VirtualScreenFocusResult, _impl_.result_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::InputMethodRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::InputMethodRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::InputMethodRequest, _impl_.display_id_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::InputMethodRequest, _impl_.package_name_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::InputMethodRequest, _impl_.ret_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::InputMethodRequest, _impl_.x_pos_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::InputMethodRequest, _impl_.y_pos_),
  1,
  0,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::SingleFile, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::SingleFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::SingleFile, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::SingleFile, _impl_.mime_type_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::SingleFile, _impl_.package_name_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::FilesList, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::FilesList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::FilesList, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::FilesList, _impl_.item_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::FilesList, _impl_.size_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::MediaPlayStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::MediaPlayStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::MediaPlayStatus, _impl_.result_),
  0,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::AppMultiplier, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::AppMultiplier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::AppMultiplier, _impl_.package_name_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::AppMultiplier, _impl_.multiplier_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::AppMultiplier, _impl_.info_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::AppMultiplierList, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::AppMultiplierList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::AppMultiplierList, _impl_.item_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::AppMultiplierList, _impl_.size_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::Info, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::Info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::Info, _impl_.package_name_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::Info, _impl_.value1_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::Info, _impl_.value2_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::Info, _impl_.value3_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::Info, _impl_.value4_),
  0,
  3,
  4,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::GetInfoList, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::GetInfoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::GetInfoList, _impl_.item_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::GetInfoList, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::GetInfoList, _impl_.size_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::ResponseInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::ResponseInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::ResponseInfo, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::ResponseInfo, _impl_.package_name_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::ResponseInfo, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::ResponseInfo, _impl_.ret_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::ResponseInfo, _impl_.info_),
  3,
  0,
  1,
  4,
  2,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::MultiplierSwitch, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::MultiplierSwitch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::MultiplierSwitch, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::MultiplierSwitch, _impl_.package_name_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::MultiplierSwitch, _impl_.enable_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::LinkOpen, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::LinkOpen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::LinkOpen, _impl_.url_),
  0,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::UpdatePackageStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::UpdatePackageStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::UpdatePackageStatus, _impl_.package_name_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::UpdatePackageStatus, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::UpdatePackageStatus, _impl_.type_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::SendSystemProp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::SendSystemProp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::SendSystemProp, _impl_.event_type_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::SendSystemProp, _impl_.value_field_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::SendSystemProp, _impl_.value_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::EventSequence, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::EventSequence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::EventSequence, _impl_.notification_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::EventSequence, _impl_.event_info_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::EventSequence, _impl_.launch_result_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::EventSequence, _impl_.close_result_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::EventSequence, _impl_.set_clipboard_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::EventSequence, _impl_.focus_result_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::EventSequence, _impl_.inputmethod_request_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::EventSequence, _impl_.files_list_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::EventSequence, _impl_.mediaplay_status_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::EventSequence, _impl_.app_multipliers_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::EventSequence, _impl_.response_info_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::EventSequence, _impl_.multiplier_switch_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::EventSequence, _impl_.link_open_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::EventSequence, _impl_.update_package_status_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::EventSequence, _impl_.system_prop_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::EventSequence, _impl_.get_info_list_),
  PROTOBUF_FIELD_OFFSET(::cn::kylinos::kmre::kmrecore::EventSequence, _impl_.container_env_boot_status_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::cn::kylinos::kmre::kmrecore::InstallApp)},
  { 12, 19, -1, sizeof(::cn::kylinos::kmre::kmrecore::UninstallApp)},
  { 20, 31, -1, sizeof(::cn::kylinos::kmre::kmrecore::LaunchApp)},
  { 36, 45, -1, sizeof(::cn::kylinos::kmre::kmrecore::CloseApp)},
  { 48, 55, -1, sizeof(::cn::kylinos::kmre::kmrecore::GetInstalledAppList)},
  { 56, 63, -1, sizeof(::cn::kylinos::kmre::kmrecore::GetRunningAppList)},
  { 64, 71, -1, sizeof(::cn::kylinos::kmre::kmrecore::SetClipboard)},
  { 72, 79, -1, sizeof(::cn::kylinos::kmre::kmrecore::FocusWin)},
  { 80, 90, -1, sizeof(::cn::kylinos::kmre::kmrecore::ControlApp)},
  { 94, 102, -1, sizeof(::cn::kylinos::kmre::kmrecore::InsertFile)},
  { 104, 112, -1, sizeof(::cn::kylinos::kmre::kmrecore::RemoveFile)},
  { 114, 121, -1, sizeof(::cn::kylinos::kmre::kmrecore::RequestMediaFiles)},
  { 122, 132, -1, sizeof(::cn::kylinos::kmre::kmrecore::DragFile)},
  { 136, 147, -1, sizeof(::cn::kylinos::kmre::kmrecore::RotationChanged)},
  { 152, 161, -1, sizeof(::cn::kylinos::kmre::kmrecore::SetSystemProp)},
  { 164, 172, -1, sizeof(::cn::kylinos::kmre::kmrecore::GetSystemProp)},
  { 174, 184, -1, sizeof(::cn::kylinos::kmre::kmrecore::UpdateAppWindowSize)},
  { 188, 198, -1, sizeof(::cn::kylinos::kmre::kmrecore::SetProxy)},
  { 202, 211, -1, sizeof(::cn::kylinos::kmre::kmrecore::UpdateDisplaySize)},
  { 214, 221, -1, sizeof(::cn::kylinos::kmre::kmrecore::AnswerCall)},
  { 222, 230, -1, sizeof(::cn::kylinos::kmre::kmrecore::ContainerEnvBootStatus)},
  { 232, 241, -1, sizeof(::cn::kylinos::kmre::kmrecore::ActionResult)},
  { 244, 252, -1, sizeof(::cn::kylinos::kmre::kmrecore::EventInfo)},
  { 254, 265, -1, sizeof(::cn::kylinos::kmre::kmrecore::InstalledAppItem)},
  { 270, 278, -1, sizeof(::cn::kylinos::kmre::kmrecore::InstalledAppList)},
  { 280, 288, -1, sizeof(::cn::kylinos::kmre::kmrecore::RunningAppItem)},
  { 290, 298, -1, sizeof(::cn::kylinos::kmre::kmrecore::RunningAppList)},
  { 300, 313, -1, sizeof(::cn::kylinos::kmre::kmrecore::Notification)},
  { 320, 336, -1, sizeof(::cn::kylinos::kmre::kmrecore::LaunchResult)},
  { 346, 354, -1, sizeof(::cn::kylinos::kmre::kmrecore::CloseResult)},
  { 356, 364, -1, sizeof(::cn::kylinos::kmre::kmrecore::VirtualScreenFocusResult)},
  { 366, 377, -1, sizeof(::cn::kylinos::kmre::kmrecore::InputMethodRequest)},
  { 382, 391, -1, sizeof(::cn::kylinos::kmre::kmrecore::SingleFile)},
  { 394, 403, -1, sizeof(::cn::kylinos::kmre::kmrecore::FilesList)},
  { 406, 413, -1, sizeof(::cn::kylinos::kmre::kmrecore::MediaPlayStatus)},
  { 414, 423, -1, sizeof(::cn::kylinos::kmre::kmrecore::AppMultiplier)},
  { 426, 434, -1, sizeof(::cn::kylinos::kmre::kmrecore::AppMultiplierList)},
  { 436, 447, -1, sizeof(::cn::kylinos::kmre::kmrecore::Info)},
  { 452, 461, -1, sizeof(::cn::kylinos::kmre::kmrecore::GetInfoList)},
  { 464, 475, -1, sizeof(::cn::kylinos::kmre::kmrecore::ResponseInfo)},
  { 480, 489, -1, sizeof(::cn::kylinos::kmre::kmrecore::MultiplierSwitch)},
  { 492, 499, -1, sizeof(::cn::kylinos::kmre::kmrecore::LinkOpen)},
  { 500, 509, -1, sizeof(::cn::kylinos::kmre::kmrecore::UpdatePackageStatus)},
  { 512, 521, -1, sizeof(::cn::kylinos::kmre::kmrecore::SendSystemProp)},
  { 524, 547, -1, sizeof(::cn::kylinos::kmre::kmrecore::EventSequence)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::cn::kylinos::kmre::kmrecore::_InstallApp_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_UninstallApp_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_LaunchApp_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_CloseApp_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_GetInstalledAppList_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_GetRunningAppList_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_SetClipboard_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_FocusWin_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_ControlApp_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_InsertFile_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_RemoveFile_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_RequestMediaFiles_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_DragFile_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_RotationChanged_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_SetSystemProp_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_GetSystemProp_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_UpdateAppWindowSize_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_SetProxy_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_UpdateDisplaySize_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_AnswerCall_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_ContainerEnvBootStatus_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_ActionResult_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_EventInfo_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_InstalledAppItem_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_InstalledAppList_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_RunningAppItem_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_RunningAppList_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_Notification_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_LaunchResult_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_CloseResult_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_VirtualScreenFocusResult_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_InputMethodRequest_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_SingleFile_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_FilesList_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_MediaPlayStatus_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_AppMultiplier_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_AppMultiplierList_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_Info_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_GetInfoList_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_ResponseInfo_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_MultiplierSwitch_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_LinkOpen_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_UpdatePackageStatus_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_SendSystemProp_default_instance_._instance,
  &::cn::kylinos::kmre::kmrecore::_EventSequence_default_instance_._instance,
};

const char descriptor_table_protodef_KmreCore_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016KmreCore.proto\022\030cn.kylinos.kmre.kmreco"
  "re\"G\n\nInstallApp\022\021\n\tfile_name\030\001 \002(\t\022\020\n\010a"
  "pp_name\030\002 \002(\t\022\024\n\014package_name\030\003 \002(\t\"$\n\014U"
  "ninstallApp\022\024\n\014package_name\030\001 \002(\t\"e\n\tLau"
  "nchApp\022\024\n\014package_name\030\001 \002(\t\022\022\n\nfullscre"
  "en\030\002 \002(\010\022\r\n\005width\030\003 \002(\005\022\016\n\006height\030\004 \002(\005\022"
  "\017\n\007density\030\005 \002(\005\"F\n\010CloseApp\022\020\n\010app_name"
  "\030\001 \002(\t\022\024\n\014package_name\030\002 \002(\t\022\022\n\nforce_ki"
  "ll\030\003 \001(\010\"/\n\023GetInstalledAppList\022\030\n\020inclu"
  "de_hide_app\030\001 \001(\010\"+\n\021GetRunningAppList\022\026"
  "\n\016with_thumbnail\030\001 \002(\010\"\037\n\014SetClipboard\022\017"
  "\n\007content\030\001 \002(\t\"\035\n\010FocusWin\022\021\n\tfocus_win"
  "\030\001 \002(\005\"_\n\nControlApp\022\022\n\ndisplay_id\030\001 \002(\005"
  "\022\024\n\014package_name\030\002 \002(\t\022\022\n\nevent_type\030\003 \002"
  "(\005\022\023\n\013event_value\030\004 \001(\005\"-\n\nInsertFile\022\014\n"
  "\004data\030\001 \002(\t\022\021\n\tmime_type\030\002 \002(\t\"-\n\nRemove"
  "File\022\014\n\004data\030\001 \002(\t\022\021\n\tmime_type\030\002 \002(\t\"!\n"
  "\021RequestMediaFiles\022\014\n\004type\030\001 \002(\005\"c\n\010Drag"
  "File\022\021\n\tfile_path\030\001 \002(\t\022\024\n\014package_name\030"
  "\002 \002(\t\022\022\n\ndisplay_id\030\003 \001(\005\022\032\n\022has_double_"
  "display\030\004 \001(\010\"l\n\017RotationChanged\022\022\n\ndisp"
  "lay_id\030\001 \002(\005\022\024\n\014package_name\030\002 \002(\t\022\r\n\005wi"
  "dth\030\003 \002(\005\022\016\n\006height\030\004 \002(\005\022\020\n\010rotation\030\005 "
  "\002(\005\"G\n\rSetSystemProp\022\022\n\nevent_type\030\001 \002(\005"
  "\022\023\n\013value_field\030\002 \002(\t\022\r\n\005value\030\003 \002(\t\"8\n\r"
  "GetSystemProp\022\022\n\nevent_type\030\001 \002(\005\022\023\n\013val"
  "ue_field\030\002 \002(\t\"^\n\023UpdateAppWindowSize\022\024\n"
  "\014package_name\030\001 \002(\t\022\022\n\ndisplay_id\030\002 \002(\005\022"
  "\r\n\005width\030\003 \002(\005\022\016\n\006height\030\004 \002(\005\"B\n\010SetPro"
  "xy\022\014\n\004open\030\001 \002(\010\022\014\n\004host\030\002 \001(\t\022\014\n\004port\030\003"
  " \001(\005\022\014\n\004type\030\004 \001(\t\"F\n\021UpdateDisplaySize\022"
  "\022\n\ndisplay_id\030\001 \002(\005\022\r\n\005width\030\002 \002(\005\022\016\n\006he"
  "ight\030\003 \002(\005\"\034\n\nAnswerCall\022\016\n\006answer\030\001 \002(\010"
  "\":\n\026ContainerEnvBootStatus\022\016\n\006status\030\001 \002"
  "(\010\022\020\n\010err_info\030\002 \001(\t\"A\n\014ActionResult\022\016\n\006"
  "result\030\001 \002(\010\022\017\n\007org_cmd\030\002 \002(\t\022\020\n\010err_inf"
  "o\030\003 \001(\t\"3\n\tEventInfo\022\020\n\010event_id\030\001 \002(\005\022\024"
  "\n\014package_name\030\002 \001(\t\"x\n\020InstalledAppItem"
  "\022\020\n\010app_name\030\001 \002(\t\022\024\n\014package_name\030\002 \002(\t"
  "\022\024\n\014version_code\030\003 \002(\003\022\024\n\014version_name\030\004"
  " \002(\t\022\020\n\010app_info\030\005 \001(\t\"Z\n\020InstalledAppLi"
  "st\0228\n\004item\030\001 \003(\0132*.cn.kylinos.kmre.kmrec"
  "ore.InstalledAppItem\022\014\n\004size\030\002 \002(\005\"8\n\016Ru"
  "nningAppItem\022\020\n\010app_name\030\001 \002(\t\022\024\n\014packag"
  "e_name\030\002 \002(\t\"V\n\016RunningAppList\0226\n\004item\030\001"
  " \003(\0132(.cn.kylinos.kmre.kmrecore.RunningA"
  "ppItem\022\014\n\004size\030\002 \002(\005\"\214\001\n\014Notification\022\024\n"
  "\014package_name\030\001 \002(\t\022\020\n\010app_name\030\002 \002(\t\022\014\n"
  "\004text\030\003 \001(\t\022\022\n\ndisplay_id\030\004 \001(\005\022\014\n\004hide\030"
  "\005 \001(\010\022\025\n\rincoming_call\030\006 \001(\010\022\r\n\005title\030\007 "
  "\001(\t\"\303\001\n\014LaunchResult\022\020\n\010app_name\030\001 \002(\t\022\024"
  "\n\014package_name\030\002 \002(\t\022\016\n\006result\030\003 \002(\010\022\022\n\n"
  "display_id\030\004 \002(\005\022\r\n\005width\030\005 \002(\005\022\016\n\006heigh"
  "t\030\006 \002(\005\022\017\n\007density\030\007 \002(\005\022\022\n\nfullscreen\030\010"
  " \002(\010\022\016\n\006exists\030\t \001(\010\022\023\n\013app_resumed\030\n \001("
  "\010\"3\n\013CloseResult\022\024\n\014package_name\030\001 \002(\t\022\016"
  "\n\006result\030\002 \002(\010\">\n\030VirtualScreenFocusResu"
  "lt\022\022\n\ndisplay_id\030\001 \002(\005\022\016\n\006result\030\002 \002(\010\"i"
  "\n\022InputMethodRequest\022\022\n\ndisplay_id\030\001 \002(\005"
  "\022\024\n\014package_name\030\002 \002(\t\022\013\n\003ret\030\003 \002(\010\022\r\n\005x"
  "_pos\030\004 \001(\005\022\r\n\005y_pos\030\005 \001(\005\"C\n\nSingleFile\022"
  "\014\n\004data\030\001 \002(\t\022\021\n\tmime_type\030\002 \002(\t\022\024\n\014pack"
  "age_name\030\003 \001(\t\"[\n\tFilesList\022\014\n\004type\030\001 \002("
  "\005\0222\n\004item\030\002 \003(\0132$.cn.kylinos.kmre.kmreco"
  "re.SingleFile\022\014\n\004size\030\003 \002(\005\"!\n\017MediaPlay"
  "Status\022\016\n\006result\030\001 \002(\010\"G\n\rAppMultiplier\022"
  "\024\n\014package_name\030\001 \002(\t\022\022\n\nmultiplier\030\002 \002("
  "\005\022\014\n\004info\030\003 \001(\t\"X\n\021AppMultiplierList\0225\n\004"
  "item\030\001 \003(\0132\'.cn.kylinos.kmre.kmrecore.Ap"
  "pMultiplier\022\014\n\004size\030\002 \002(\005\"\\\n\004Info\022\024\n\014pac"
  "kage_name\030\001 \002(\t\022\016\n\006value1\030\002 \001(\005\022\016\n\006value"
  "2\030\003 \001(\005\022\016\n\006value3\030\004 \001(\t\022\016\n\006value4\030\005 \001(\t\""
  "W\n\013GetInfoList\022,\n\004item\030\001 \003(\0132\036.cn.kylino"
  "s.kmre.kmrecore.Info\022\014\n\004type\030\002 \002(\t\022\014\n\004si"
  "ze\030\003 \002(\005\"c\n\014ResponseInfo\022\020\n\010event_id\030\001 \002"
  "(\005\022\024\n\014package_name\030\002 \002(\t\022\020\n\010category\030\003 \002"
  "(\t\022\013\n\003ret\030\004 \002(\005\022\014\n\004info\030\005 \001(\t\"J\n\020Multipl"
  "ierSwitch\022\020\n\010event_id\030\001 \002(\005\022\024\n\014package_n"
  "ame\030\002 \002(\t\022\016\n\006enable\030\003 \002(\010\"\027\n\010LinkOpen\022\013\n"
  "\003url\030\001 \002(\t\"I\n\023UpdatePackageStatus\022\024\n\014pac"
  "kage_name\030\001 \002(\t\022\016\n\006status\030\002 \002(\005\022\014\n\004type\030"
  "\003 \001(\005\"H\n\016SendSystemProp\022\022\n\nevent_type\030\001 "
  "\002(\005\022\023\n\013value_field\030\002 \002(\t\022\r\n\005value\030\003 \002(\t\""
  "\367\010\n\rEventSequence\022<\n\014notification\030\001 \001(\0132"
  "&.cn.kylinos.kmre.kmrecore.Notification\022"
  "7\n\nevent_info\030\002 \001(\0132#.cn.kylinos.kmre.km"
  "recore.EventInfo\022=\n\rlaunch_result\030\003 \001(\0132"
  "&.cn.kylinos.kmre.kmrecore.LaunchResult\022"
  ";\n\014close_result\030\004 \001(\0132%.cn.kylinos.kmre."
  "kmrecore.CloseResult\022=\n\rset_clipboard\030\005 "
  "\001(\0132&.cn.kylinos.kmre.kmrecore.SetClipbo"
  "ard\022H\n\014focus_result\030\006 \001(\01322.cn.kylinos.k"
  "mre.kmrecore.VirtualScreenFocusResult\022I\n"
  "\023inputmethod_request\030\007 \001(\0132,.cn.kylinos."
  "kmre.kmrecore.InputMethodRequest\0227\n\nfile"
  "s_list\030\010 \001(\0132#.cn.kylinos.kmre.kmrecore."
  "FilesList\022C\n\020mediaplay_status\030\t \001(\0132).cn"
  ".kylinos.kmre.kmrecore.MediaPlayStatus\022D"
  "\n\017app_multipliers\030\n \001(\0132+.cn.kylinos.kmr"
  "e.kmrecore.AppMultiplierList\022=\n\rresponse"
  "_info\030\013 \001(\0132&.cn.kylinos.kmre.kmrecore.R"
  "esponseInfo\022E\n\021multiplier_switch\030\014 \001(\0132*"
  ".cn.kylinos.kmre.kmrecore.MultiplierSwit"
  "ch\0225\n\tlink_open\030\r \001(\0132\".cn.kylinos.kmre."
  "kmrecore.LinkOpen\022L\n\025update_package_stat"
  "us\030\016 \001(\0132-.cn.kylinos.kmre.kmrecore.Upda"
  "tePackageStatus\022=\n\013system_prop\030\017 \001(\0132(.c"
  "n.kylinos.kmre.kmrecore.SendSystemProp\022<"
  "\n\rget_info_list\030\020 \001(\0132%.cn.kylinos.kmre."
  "kmrecore.GetInfoList\022S\n\031container_env_bo"
  "ot_status\030\021 \001(\01320.cn.kylinos.kmre.kmreco"
  "re.ContainerEnvBootStatusB/\n\036cn.kylinos."
  "kmre.proto.kmrecoreB\rKmreCoreProto"
  ;
static ::_pbi::once_flag descriptor_table_KmreCore_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_KmreCore_2eproto = {
    false, false, 4514, descriptor_table_protodef_KmreCore_2eproto,
    "KmreCore.proto",
    &descriptor_table_KmreCore_2eproto_once, nullptr, 0, 45,
    schemas, file_default_instances, TableStruct_KmreCore_2eproto::offsets,
    file_level_metadata_KmreCore_2eproto, file_level_enum_descriptors_KmreCore_2eproto,
    file_level_service_descriptors_KmreCore_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_KmreCore_2eproto_getter() {
  return &descriptor_table_KmreCore_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_KmreCore_2eproto(&descriptor_table_KmreCore_2eproto);
namespace cn {
namespace kylinos {
namespace kmre {
namespace kmrecore {

// ===================================================================

class InstallApp::_Internal {
 public:
  using HasBits = decltype(std::declval<InstallApp>()._impl_._has_bits_);
  static void set_has_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_app_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

InstallApp::InstallApp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.InstallApp)
}
InstallApp::InstallApp(const InstallApp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InstallApp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.file_name_){}
    , decltype(_impl_.app_name_){}
    , decltype(_impl_.package_name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_name()) {
    _this->_impl_.file_name_.Set(from._internal_file_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_app_name()) {
    _this->_impl_.app_name_.Set(from._internal_app_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_package_name()) {
    _this->_impl_.package_name_.Set(from._internal_package_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.InstallApp)
}

inline void InstallApp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.file_name_){}
    , decltype(_impl_.app_name_){}
    , decltype(_impl_.package_name_){}
  };
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InstallApp::~InstallApp() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.InstallApp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InstallApp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.file_name_.Destroy();
  _impl_.app_name_.Destroy();
  _impl_.package_name_.Destroy();
}

void InstallApp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InstallApp::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.InstallApp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.file_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.app_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.package_name_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstallApp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string file_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.InstallApp.file_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string app_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_app_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.InstallApp.app_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string package_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_package_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.InstallApp.package_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InstallApp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.InstallApp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string file_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.InstallApp.file_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_name(), target);
  }

  // required string app_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_app_name().data(), static_cast<int>(this->_internal_app_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.InstallApp.app_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_name(), target);
  }

  // required string package_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_package_name().data(), static_cast<int>(this->_internal_package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.InstallApp.package_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_package_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.InstallApp)
  return target;
}

size_t InstallApp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cn.kylinos.kmre.kmrecore.InstallApp)
  size_t total_size = 0;

  if (_internal_has_file_name()) {
    // required string file_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  if (_internal_has_app_name()) {
    // required string app_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_name());
  }

  if (_internal_has_package_name()) {
    // required string package_name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_name());
  }

  return total_size;
}
size_t InstallApp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.InstallApp)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string file_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());

    // required string app_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_name());

    // required string package_name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InstallApp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InstallApp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InstallApp::GetClassData() const { return &_class_data_; }


void InstallApp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InstallApp*>(&to_msg);
  auto& from = static_cast<const InstallApp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.InstallApp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_file_name(from._internal_file_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_app_name(from._internal_app_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_package_name(from._internal_package_name());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InstallApp::CopyFrom(const InstallApp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.InstallApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstallApp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void InstallApp::InternalSwap(InstallApp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_name_, lhs_arena,
      &other->_impl_.file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_name_, lhs_arena,
      &other->_impl_.app_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.package_name_, lhs_arena,
      &other->_impl_.package_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InstallApp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[0]);
}

// ===================================================================

class UninstallApp::_Internal {
 public:
  using HasBits = decltype(std::declval<UninstallApp>()._impl_._has_bits_);
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

UninstallApp::UninstallApp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.UninstallApp)
}
UninstallApp::UninstallApp(const UninstallApp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UninstallApp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.package_name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_package_name()) {
    _this->_impl_.package_name_.Set(from._internal_package_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.UninstallApp)
}

inline void UninstallApp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.package_name_){}
  };
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UninstallApp::~UninstallApp() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.UninstallApp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UninstallApp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.package_name_.Destroy();
}

void UninstallApp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UninstallApp::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.UninstallApp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.package_name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UninstallApp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string package_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_package_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.UninstallApp.package_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UninstallApp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.UninstallApp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string package_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_package_name().data(), static_cast<int>(this->_internal_package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.UninstallApp.package_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_package_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.UninstallApp)
  return target;
}

size_t UninstallApp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.UninstallApp)
  size_t total_size = 0;

  // required string package_name = 1;
  if (_internal_has_package_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_name());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UninstallApp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UninstallApp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UninstallApp::GetClassData() const { return &_class_data_; }


void UninstallApp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UninstallApp*>(&to_msg);
  auto& from = static_cast<const UninstallApp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.UninstallApp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_package_name()) {
    _this->_internal_set_package_name(from._internal_package_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UninstallApp::CopyFrom(const UninstallApp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.UninstallApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UninstallApp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void UninstallApp::InternalSwap(UninstallApp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.package_name_, lhs_arena,
      &other->_impl_.package_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UninstallApp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[1]);
}

// ===================================================================

class LaunchApp::_Internal {
 public:
  using HasBits = decltype(std::declval<LaunchApp>()._impl_._has_bits_);
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fullscreen(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_density(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

LaunchApp::LaunchApp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.LaunchApp)
}
LaunchApp::LaunchApp(const LaunchApp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LaunchApp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.package_name_){}
    , decltype(_impl_.fullscreen_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.density_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_package_name()) {
    _this->_impl_.package_name_.Set(from._internal_package_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.fullscreen_, &from._impl_.fullscreen_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.density_) -
    reinterpret_cast<char*>(&_impl_.fullscreen_)) + sizeof(_impl_.density_));
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.LaunchApp)
}

inline void LaunchApp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.package_name_){}
    , decltype(_impl_.fullscreen_){false}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
    , decltype(_impl_.density_){0}
  };
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LaunchApp::~LaunchApp() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.LaunchApp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LaunchApp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.package_name_.Destroy();
}

void LaunchApp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LaunchApp::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.LaunchApp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.package_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.fullscreen_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.density_) -
        reinterpret_cast<char*>(&_impl_.fullscreen_)) + sizeof(_impl_.density_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaunchApp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string package_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_package_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.LaunchApp.package_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required bool fullscreen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_fullscreen(&has_bits);
          _impl_.fullscreen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 density = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_density(&has_bits);
          _impl_.density_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LaunchApp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.LaunchApp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string package_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_package_name().data(), static_cast<int>(this->_internal_package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.LaunchApp.package_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_package_name(), target);
  }

  // required bool fullscreen = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_fullscreen(), target);
  }

  // required int32 width = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_width(), target);
  }

  // required int32 height = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_height(), target);
  }

  // required int32 density = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_density(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.LaunchApp)
  return target;
}

size_t LaunchApp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cn.kylinos.kmre.kmrecore.LaunchApp)
  size_t total_size = 0;

  if (_internal_has_package_name()) {
    // required string package_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_name());
  }

  if (_internal_has_fullscreen()) {
    // required bool fullscreen = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_width()) {
    // required int32 width = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  if (_internal_has_height()) {
    // required int32 height = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  if (_internal_has_density()) {
    // required int32 density = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_density());
  }

  return total_size;
}
size_t LaunchApp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.LaunchApp)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string package_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_name());

    // required bool fullscreen = 2;
    total_size += 1 + 1;

    // required int32 width = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());

    // required int32 height = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());

    // required int32 density = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_density());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaunchApp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LaunchApp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaunchApp::GetClassData() const { return &_class_data_; }


void LaunchApp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LaunchApp*>(&to_msg);
  auto& from = static_cast<const LaunchApp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.LaunchApp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_package_name(from._internal_package_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.fullscreen_ = from._impl_.fullscreen_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.height_ = from._impl_.height_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.density_ = from._impl_.density_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaunchApp::CopyFrom(const LaunchApp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.LaunchApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaunchApp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void LaunchApp::InternalSwap(LaunchApp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.package_name_, lhs_arena,
      &other->_impl_.package_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaunchApp, _impl_.density_)
      + sizeof(LaunchApp::_impl_.density_)
      - PROTOBUF_FIELD_OFFSET(LaunchApp, _impl_.fullscreen_)>(
          reinterpret_cast<char*>(&_impl_.fullscreen_),
          reinterpret_cast<char*>(&other->_impl_.fullscreen_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaunchApp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[2]);
}

// ===================================================================

class CloseApp::_Internal {
 public:
  using HasBits = decltype(std::declval<CloseApp>()._impl_._has_bits_);
  static void set_has_app_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_force_kill(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CloseApp::CloseApp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.CloseApp)
}
CloseApp::CloseApp(const CloseApp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CloseApp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.app_name_){}
    , decltype(_impl_.package_name_){}
    , decltype(_impl_.force_kill_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.app_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_app_name()) {
    _this->_impl_.app_name_.Set(from._internal_app_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_package_name()) {
    _this->_impl_.package_name_.Set(from._internal_package_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.force_kill_ = from._impl_.force_kill_;
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.CloseApp)
}

inline void CloseApp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.app_name_){}
    , decltype(_impl_.package_name_){}
    , decltype(_impl_.force_kill_){false}
  };
  _impl_.app_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CloseApp::~CloseApp() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.CloseApp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CloseApp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.app_name_.Destroy();
  _impl_.package_name_.Destroy();
}

void CloseApp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CloseApp::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.CloseApp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.app_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.package_name_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.force_kill_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseApp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string app_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_app_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.CloseApp.app_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string package_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_package_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.CloseApp.package_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool force_kill = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_force_kill(&has_bits);
          _impl_.force_kill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CloseApp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.CloseApp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string app_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_app_name().data(), static_cast<int>(this->_internal_app_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.CloseApp.app_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_name(), target);
  }

  // required string package_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_package_name().data(), static_cast<int>(this->_internal_package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.CloseApp.package_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_package_name(), target);
  }

  // optional bool force_kill = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_force_kill(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.CloseApp)
  return target;
}

size_t CloseApp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cn.kylinos.kmre.kmrecore.CloseApp)
  size_t total_size = 0;

  if (_internal_has_app_name()) {
    // required string app_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_name());
  }

  if (_internal_has_package_name()) {
    // required string package_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_name());
  }

  return total_size;
}
size_t CloseApp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.CloseApp)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string app_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_name());

    // required string package_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool force_kill = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CloseApp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CloseApp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CloseApp::GetClassData() const { return &_class_data_; }


void CloseApp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CloseApp*>(&to_msg);
  auto& from = static_cast<const CloseApp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.CloseApp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_app_name(from._internal_app_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_package_name(from._internal_package_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.force_kill_ = from._impl_.force_kill_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CloseApp::CopyFrom(const CloseApp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.CloseApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseApp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CloseApp::InternalSwap(CloseApp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_name_, lhs_arena,
      &other->_impl_.app_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.package_name_, lhs_arena,
      &other->_impl_.package_name_, rhs_arena
  );
  swap(_impl_.force_kill_, other->_impl_.force_kill_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseApp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[3]);
}

// ===================================================================

class GetInstalledAppList::_Internal {
 public:
  using HasBits = decltype(std::declval<GetInstalledAppList>()._impl_._has_bits_);
  static void set_has_include_hide_app(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetInstalledAppList::GetInstalledAppList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.GetInstalledAppList)
}
GetInstalledAppList::GetInstalledAppList(const GetInstalledAppList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetInstalledAppList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.include_hide_app_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.include_hide_app_ = from._impl_.include_hide_app_;
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.GetInstalledAppList)
}

inline void GetInstalledAppList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.include_hide_app_){false}
  };
}

GetInstalledAppList::~GetInstalledAppList() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.GetInstalledAppList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetInstalledAppList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetInstalledAppList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetInstalledAppList::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.GetInstalledAppList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.include_hide_app_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetInstalledAppList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool include_hide_app = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_include_hide_app(&has_bits);
          _impl_.include_hide_app_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetInstalledAppList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.GetInstalledAppList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool include_hide_app = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_include_hide_app(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.GetInstalledAppList)
  return target;
}

size_t GetInstalledAppList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.GetInstalledAppList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool include_hide_app = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetInstalledAppList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetInstalledAppList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetInstalledAppList::GetClassData() const { return &_class_data_; }


void GetInstalledAppList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetInstalledAppList*>(&to_msg);
  auto& from = static_cast<const GetInstalledAppList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.GetInstalledAppList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_include_hide_app()) {
    _this->_internal_set_include_hide_app(from._internal_include_hide_app());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetInstalledAppList::CopyFrom(const GetInstalledAppList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.GetInstalledAppList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInstalledAppList::IsInitialized() const {
  return true;
}

void GetInstalledAppList::InternalSwap(GetInstalledAppList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.include_hide_app_, other->_impl_.include_hide_app_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInstalledAppList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[4]);
}

// ===================================================================

class GetRunningAppList::_Internal {
 public:
  using HasBits = decltype(std::declval<GetRunningAppList>()._impl_._has_bits_);
  static void set_has_with_thumbnail(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GetRunningAppList::GetRunningAppList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.GetRunningAppList)
}
GetRunningAppList::GetRunningAppList(const GetRunningAppList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetRunningAppList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.with_thumbnail_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.with_thumbnail_ = from._impl_.with_thumbnail_;
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.GetRunningAppList)
}

inline void GetRunningAppList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.with_thumbnail_){false}
  };
}

GetRunningAppList::~GetRunningAppList() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.GetRunningAppList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetRunningAppList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetRunningAppList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetRunningAppList::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.GetRunningAppList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.with_thumbnail_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRunningAppList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool with_thumbnail = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_with_thumbnail(&has_bits);
          _impl_.with_thumbnail_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetRunningAppList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.GetRunningAppList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool with_thumbnail = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_with_thumbnail(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.GetRunningAppList)
  return target;
}

size_t GetRunningAppList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.GetRunningAppList)
  size_t total_size = 0;

  // required bool with_thumbnail = 1;
  if (_internal_has_with_thumbnail()) {
    total_size += 1 + 1;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRunningAppList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetRunningAppList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRunningAppList::GetClassData() const { return &_class_data_; }


void GetRunningAppList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetRunningAppList*>(&to_msg);
  auto& from = static_cast<const GetRunningAppList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.GetRunningAppList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_with_thumbnail()) {
    _this->_internal_set_with_thumbnail(from._internal_with_thumbnail());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRunningAppList::CopyFrom(const GetRunningAppList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.GetRunningAppList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRunningAppList::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GetRunningAppList::InternalSwap(GetRunningAppList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.with_thumbnail_, other->_impl_.with_thumbnail_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRunningAppList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[5]);
}

// ===================================================================

class SetClipboard::_Internal {
 public:
  using HasBits = decltype(std::declval<SetClipboard>()._impl_._has_bits_);
  static void set_has_content(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SetClipboard::SetClipboard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.SetClipboard)
}
SetClipboard::SetClipboard(const SetClipboard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetClipboard* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.content_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_content()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.SetClipboard)
}

inline void SetClipboard::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.content_){}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetClipboard::~SetClipboard() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.SetClipboard)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetClipboard::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
}

void SetClipboard::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetClipboard::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.SetClipboard)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.content_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetClipboard::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.SetClipboard.content");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetClipboard::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.SetClipboard)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string content = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.SetClipboard.content");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.SetClipboard)
  return target;
}

size_t SetClipboard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.SetClipboard)
  size_t total_size = 0;

  // required string content = 1;
  if (_internal_has_content()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetClipboard::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetClipboard::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetClipboard::GetClassData() const { return &_class_data_; }


void SetClipboard::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetClipboard*>(&to_msg);
  auto& from = static_cast<const SetClipboard&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.SetClipboard)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_content()) {
    _this->_internal_set_content(from._internal_content());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetClipboard::CopyFrom(const SetClipboard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.SetClipboard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetClipboard::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SetClipboard::InternalSwap(SetClipboard* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SetClipboard::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[6]);
}

// ===================================================================

class FocusWin::_Internal {
 public:
  using HasBits = decltype(std::declval<FocusWin>()._impl_._has_bits_);
  static void set_has_focus_win(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

FocusWin::FocusWin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.FocusWin)
}
FocusWin::FocusWin(const FocusWin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FocusWin* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.focus_win_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.focus_win_ = from._impl_.focus_win_;
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.FocusWin)
}

inline void FocusWin::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.focus_win_){0}
  };
}

FocusWin::~FocusWin() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.FocusWin)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FocusWin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FocusWin::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FocusWin::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.FocusWin)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.focus_win_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FocusWin::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 focus_win = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_focus_win(&has_bits);
          _impl_.focus_win_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FocusWin::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.FocusWin)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 focus_win = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_focus_win(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.FocusWin)
  return target;
}

size_t FocusWin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.FocusWin)
  size_t total_size = 0;

  // required int32 focus_win = 1;
  if (_internal_has_focus_win()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_focus_win());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FocusWin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FocusWin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FocusWin::GetClassData() const { return &_class_data_; }


void FocusWin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FocusWin*>(&to_msg);
  auto& from = static_cast<const FocusWin&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.FocusWin)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_focus_win()) {
    _this->_internal_set_focus_win(from._internal_focus_win());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FocusWin::CopyFrom(const FocusWin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.FocusWin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FocusWin::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void FocusWin::InternalSwap(FocusWin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.focus_win_, other->_impl_.focus_win_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FocusWin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[7]);
}

// ===================================================================

class ControlApp::_Internal {
 public:
  using HasBits = decltype(std::declval<ControlApp>()._impl_._has_bits_);
  static void set_has_display_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_event_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

ControlApp::ControlApp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.ControlApp)
}
ControlApp::ControlApp(const ControlApp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ControlApp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.package_name_){}
    , decltype(_impl_.display_id_){}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.event_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_package_name()) {
    _this->_impl_.package_name_.Set(from._internal_package_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.display_id_, &from._impl_.display_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.event_value_) -
    reinterpret_cast<char*>(&_impl_.display_id_)) + sizeof(_impl_.event_value_));
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.ControlApp)
}

inline void ControlApp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.package_name_){}
    , decltype(_impl_.display_id_){0}
    , decltype(_impl_.event_type_){0}
    , decltype(_impl_.event_value_){0}
  };
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ControlApp::~ControlApp() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.ControlApp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ControlApp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.package_name_.Destroy();
}

void ControlApp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ControlApp::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.ControlApp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.package_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.display_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.event_value_) -
        reinterpret_cast<char*>(&_impl_.display_id_)) + sizeof(_impl_.event_value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlApp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 display_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_display_id(&has_bits);
          _impl_.display_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string package_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_package_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.ControlApp.package_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int32 event_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_event_type(&has_bits);
          _impl_.event_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 event_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_event_value(&has_bits);
          _impl_.event_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlApp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.ControlApp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 display_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_display_id(), target);
  }

  // required string package_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_package_name().data(), static_cast<int>(this->_internal_package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.ControlApp.package_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_package_name(), target);
  }

  // required int32 event_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_event_type(), target);
  }

  // optional int32 event_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_event_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.ControlApp)
  return target;
}

size_t ControlApp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cn.kylinos.kmre.kmrecore.ControlApp)
  size_t total_size = 0;

  if (_internal_has_package_name()) {
    // required string package_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_name());
  }

  if (_internal_has_display_id()) {
    // required int32 display_id = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_display_id());
  }

  if (_internal_has_event_type()) {
    // required int32 event_type = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_event_type());
  }

  return total_size;
}
size_t ControlApp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.ControlApp)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string package_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_name());

    // required int32 display_id = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_display_id());

    // required int32 event_type = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_event_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 event_value = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_event_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlApp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ControlApp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlApp::GetClassData() const { return &_class_data_; }


void ControlApp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ControlApp*>(&to_msg);
  auto& from = static_cast<const ControlApp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.ControlApp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_package_name(from._internal_package_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.display_id_ = from._impl_.display_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.event_type_ = from._impl_.event_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.event_value_ = from._impl_.event_value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlApp::CopyFrom(const ControlApp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.ControlApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlApp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ControlApp::InternalSwap(ControlApp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.package_name_, lhs_arena,
      &other->_impl_.package_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlApp, _impl_.event_value_)
      + sizeof(ControlApp::_impl_.event_value_)
      - PROTOBUF_FIELD_OFFSET(ControlApp, _impl_.display_id_)>(
          reinterpret_cast<char*>(&_impl_.display_id_),
          reinterpret_cast<char*>(&other->_impl_.display_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlApp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[8]);
}

// ===================================================================

class InsertFile::_Internal {
 public:
  using HasBits = decltype(std::declval<InsertFile>()._impl_._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mime_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

InsertFile::InsertFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.InsertFile)
}
InsertFile::InsertFile(const InsertFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InsertFile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){}
    , decltype(_impl_.mime_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mime_type()) {
    _this->_impl_.mime_type_.Set(from._internal_mime_type(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.InsertFile)
}

inline void InsertFile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){}
    , decltype(_impl_.mime_type_){}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InsertFile::~InsertFile() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.InsertFile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InsertFile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
  _impl_.mime_type_.Destroy();
}

void InsertFile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InsertFile::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.InsertFile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.mime_type_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertFile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.InsertFile.data");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string mime_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.InsertFile.mime_type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InsertFile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.InsertFile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.InsertFile.data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data(), target);
  }

  // required string mime_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mime_type().data(), static_cast<int>(this->_internal_mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.InsertFile.mime_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mime_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.InsertFile)
  return target;
}

size_t InsertFile::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cn.kylinos.kmre.kmrecore.InsertFile)
  size_t total_size = 0;

  if (_internal_has_data()) {
    // required string data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  if (_internal_has_mime_type()) {
    // required string mime_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());
  }

  return total_size;
}
size_t InsertFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.InsertFile)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());

    // required string mime_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertFile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InsertFile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertFile::GetClassData() const { return &_class_data_; }


void InsertFile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InsertFile*>(&to_msg);
  auto& from = static_cast<const InsertFile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.InsertFile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_mime_type(from._internal_mime_type());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertFile::CopyFrom(const InsertFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.InsertFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertFile::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void InsertFile::InternalSwap(InsertFile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mime_type_, lhs_arena,
      &other->_impl_.mime_type_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertFile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[9]);
}

// ===================================================================

class RemoveFile::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoveFile>()._impl_._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mime_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

RemoveFile::RemoveFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.RemoveFile)
}
RemoveFile::RemoveFile(const RemoveFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoveFile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){}
    , decltype(_impl_.mime_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mime_type()) {
    _this->_impl_.mime_type_.Set(from._internal_mime_type(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.RemoveFile)
}

inline void RemoveFile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){}
    , decltype(_impl_.mime_type_){}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RemoveFile::~RemoveFile() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.RemoveFile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveFile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
  _impl_.mime_type_.Destroy();
}

void RemoveFile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoveFile::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.RemoveFile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.mime_type_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveFile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.RemoveFile.data");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string mime_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.RemoveFile.mime_type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveFile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.RemoveFile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.RemoveFile.data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data(), target);
  }

  // required string mime_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mime_type().data(), static_cast<int>(this->_internal_mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.RemoveFile.mime_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mime_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.RemoveFile)
  return target;
}

size_t RemoveFile::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cn.kylinos.kmre.kmrecore.RemoveFile)
  size_t total_size = 0;

  if (_internal_has_data()) {
    // required string data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  if (_internal_has_mime_type()) {
    // required string mime_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());
  }

  return total_size;
}
size_t RemoveFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.RemoveFile)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());

    // required string mime_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveFile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoveFile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveFile::GetClassData() const { return &_class_data_; }


void RemoveFile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoveFile*>(&to_msg);
  auto& from = static_cast<const RemoveFile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.RemoveFile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_mime_type(from._internal_mime_type());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveFile::CopyFrom(const RemoveFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.RemoveFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveFile::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void RemoveFile::InternalSwap(RemoveFile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mime_type_, lhs_arena,
      &other->_impl_.mime_type_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveFile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[10]);
}

// ===================================================================

class RequestMediaFiles::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestMediaFiles>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

RequestMediaFiles::RequestMediaFiles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.RequestMediaFiles)
}
RequestMediaFiles::RequestMediaFiles(const RequestMediaFiles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestMediaFiles* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.RequestMediaFiles)
}

inline void RequestMediaFiles::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){0}
  };
}

RequestMediaFiles::~RequestMediaFiles() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.RequestMediaFiles)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestMediaFiles::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestMediaFiles::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestMediaFiles::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.RequestMediaFiles)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestMediaFiles::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestMediaFiles::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.RequestMediaFiles)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.RequestMediaFiles)
  return target;
}

size_t RequestMediaFiles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.RequestMediaFiles)
  size_t total_size = 0;

  // required int32 type = 1;
  if (_internal_has_type()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestMediaFiles::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestMediaFiles::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestMediaFiles::GetClassData() const { return &_class_data_; }


void RequestMediaFiles::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestMediaFiles*>(&to_msg);
  auto& from = static_cast<const RequestMediaFiles&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.RequestMediaFiles)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_type()) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestMediaFiles::CopyFrom(const RequestMediaFiles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.RequestMediaFiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestMediaFiles::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void RequestMediaFiles::InternalSwap(RequestMediaFiles* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestMediaFiles::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[11]);
}

// ===================================================================

class DragFile::_Internal {
 public:
  using HasBits = decltype(std::declval<DragFile>()._impl_._has_bits_);
  static void set_has_file_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_display_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_has_double_display(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

DragFile::DragFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.DragFile)
}
DragFile::DragFile(const DragFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DragFile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.file_path_){}
    , decltype(_impl_.package_name_){}
    , decltype(_impl_.display_id_){}
    , decltype(_impl_.has_double_display_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_path()) {
    _this->_impl_.file_path_.Set(from._internal_file_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_package_name()) {
    _this->_impl_.package_name_.Set(from._internal_package_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.display_id_, &from._impl_.display_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.has_double_display_) -
    reinterpret_cast<char*>(&_impl_.display_id_)) + sizeof(_impl_.has_double_display_));
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.DragFile)
}

inline void DragFile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.file_path_){}
    , decltype(_impl_.package_name_){}
    , decltype(_impl_.display_id_){0}
    , decltype(_impl_.has_double_display_){false}
  };
  _impl_.file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DragFile::~DragFile() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.DragFile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DragFile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.file_path_.Destroy();
  _impl_.package_name_.Destroy();
}

void DragFile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DragFile::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.DragFile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.file_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.package_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.display_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.has_double_display_) -
        reinterpret_cast<char*>(&_impl_.display_id_)) + sizeof(_impl_.has_double_display_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DragFile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string file_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_file_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.DragFile.file_path");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string package_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_package_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.DragFile.package_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 display_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_display_id(&has_bits);
          _impl_.display_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_double_display = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_has_double_display(&has_bits);
          _impl_.has_double_display_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DragFile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.DragFile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string file_path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_path().data(), static_cast<int>(this->_internal_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.DragFile.file_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_path(), target);
  }

  // required string package_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_package_name().data(), static_cast<int>(this->_internal_package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.DragFile.package_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_package_name(), target);
  }

  // optional int32 display_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_display_id(), target);
  }

  // optional bool has_double_display = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_has_double_display(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.DragFile)
  return target;
}

size_t DragFile::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cn.kylinos.kmre.kmrecore.DragFile)
  size_t total_size = 0;

  if (_internal_has_file_path()) {
    // required string file_path = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_path());
  }

  if (_internal_has_package_name()) {
    // required string package_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_name());
  }

  return total_size;
}
size_t DragFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.DragFile)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string file_path = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_path());

    // required string package_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional int32 display_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_display_id());
    }

    // optional bool has_double_display = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DragFile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DragFile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DragFile::GetClassData() const { return &_class_data_; }


void DragFile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DragFile*>(&to_msg);
  auto& from = static_cast<const DragFile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.DragFile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_file_path(from._internal_file_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_package_name(from._internal_package_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.display_id_ = from._impl_.display_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.has_double_display_ = from._impl_.has_double_display_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DragFile::CopyFrom(const DragFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.DragFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DragFile::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void DragFile::InternalSwap(DragFile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_path_, lhs_arena,
      &other->_impl_.file_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.package_name_, lhs_arena,
      &other->_impl_.package_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DragFile, _impl_.has_double_display_)
      + sizeof(DragFile::_impl_.has_double_display_)
      - PROTOBUF_FIELD_OFFSET(DragFile, _impl_.display_id_)>(
          reinterpret_cast<char*>(&_impl_.display_id_),
          reinterpret_cast<char*>(&other->_impl_.display_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DragFile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[12]);
}

// ===================================================================

class RotationChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<RotationChanged>()._impl_._has_bits_);
  static void set_has_display_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

RotationChanged::RotationChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.RotationChanged)
}
RotationChanged::RotationChanged(const RotationChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RotationChanged* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.package_name_){}
    , decltype(_impl_.display_id_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.rotation_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_package_name()) {
    _this->_impl_.package_name_.Set(from._internal_package_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.display_id_, &from._impl_.display_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rotation_) -
    reinterpret_cast<char*>(&_impl_.display_id_)) + sizeof(_impl_.rotation_));
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.RotationChanged)
}

inline void RotationChanged::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.package_name_){}
    , decltype(_impl_.display_id_){0}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
    , decltype(_impl_.rotation_){0}
  };
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RotationChanged::~RotationChanged() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.RotationChanged)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RotationChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.package_name_.Destroy();
}

void RotationChanged::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RotationChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.RotationChanged)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.package_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.display_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.rotation_) -
        reinterpret_cast<char*>(&_impl_.display_id_)) + sizeof(_impl_.rotation_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RotationChanged::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 display_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_display_id(&has_bits);
          _impl_.display_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string package_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_package_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.RotationChanged.package_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 rotation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_rotation(&has_bits);
          _impl_.rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RotationChanged::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.RotationChanged)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 display_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_display_id(), target);
  }

  // required string package_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_package_name().data(), static_cast<int>(this->_internal_package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.RotationChanged.package_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_package_name(), target);
  }

  // required int32 width = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_width(), target);
  }

  // required int32 height = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_height(), target);
  }

  // required int32 rotation = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_rotation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.RotationChanged)
  return target;
}

size_t RotationChanged::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cn.kylinos.kmre.kmrecore.RotationChanged)
  size_t total_size = 0;

  if (_internal_has_package_name()) {
    // required string package_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_name());
  }

  if (_internal_has_display_id()) {
    // required int32 display_id = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_display_id());
  }

  if (_internal_has_width()) {
    // required int32 width = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  if (_internal_has_height()) {
    // required int32 height = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  if (_internal_has_rotation()) {
    // required int32 rotation = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rotation());
  }

  return total_size;
}
size_t RotationChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.RotationChanged)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string package_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_name());

    // required int32 display_id = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_display_id());

    // required int32 width = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());

    // required int32 height = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());

    // required int32 rotation = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rotation());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RotationChanged::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RotationChanged::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RotationChanged::GetClassData() const { return &_class_data_; }


void RotationChanged::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RotationChanged*>(&to_msg);
  auto& from = static_cast<const RotationChanged&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.RotationChanged)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_package_name(from._internal_package_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.display_id_ = from._impl_.display_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.height_ = from._impl_.height_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.rotation_ = from._impl_.rotation_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RotationChanged::CopyFrom(const RotationChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.RotationChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotationChanged::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void RotationChanged::InternalSwap(RotationChanged* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.package_name_, lhs_arena,
      &other->_impl_.package_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RotationChanged, _impl_.rotation_)
      + sizeof(RotationChanged::_impl_.rotation_)
      - PROTOBUF_FIELD_OFFSET(RotationChanged, _impl_.display_id_)>(
          reinterpret_cast<char*>(&_impl_.display_id_),
          reinterpret_cast<char*>(&other->_impl_.display_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RotationChanged::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[13]);
}

// ===================================================================

class SetSystemProp::_Internal {
 public:
  using HasBits = decltype(std::declval<SetSystemProp>()._impl_._has_bits_);
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value_field(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

SetSystemProp::SetSystemProp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.SetSystemProp)
}
SetSystemProp::SetSystemProp(const SetSystemProp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetSystemProp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_field_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.event_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value_field()) {
    _this->_impl_.value_field_.Set(from._internal_value_field(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.event_type_ = from._impl_.event_type_;
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.SetSystemProp)
}

inline void SetSystemProp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_field_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.event_type_){0}
  };
  _impl_.value_field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetSystemProp::~SetSystemProp() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.SetSystemProp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetSystemProp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_field_.Destroy();
  _impl_.value_.Destroy();
}

void SetSystemProp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetSystemProp::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.SetSystemProp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.value_field_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.value_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.event_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetSystemProp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 event_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_event_type(&has_bits);
          _impl_.event_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string value_field = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value_field();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.SetSystemProp.value_field");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.SetSystemProp.value");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetSystemProp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.SetSystemProp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 event_type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_event_type(), target);
  }

  // required string value_field = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value_field().data(), static_cast<int>(this->_internal_value_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.SetSystemProp.value_field");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value_field(), target);
  }

  // required string value = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.SetSystemProp.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.SetSystemProp)
  return target;
}

size_t SetSystemProp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cn.kylinos.kmre.kmrecore.SetSystemProp)
  size_t total_size = 0;

  if (_internal_has_value_field()) {
    // required string value_field = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value_field());
  }

  if (_internal_has_value()) {
    // required string value = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (_internal_has_event_type()) {
    // required int32 event_type = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_event_type());
  }

  return total_size;
}
size_t SetSystemProp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.SetSystemProp)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string value_field = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value_field());

    // required string value = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());

    // required int32 event_type = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_event_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetSystemProp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetSystemProp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetSystemProp::GetClassData() const { return &_class_data_; }


void SetSystemProp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetSystemProp*>(&to_msg);
  auto& from = static_cast<const SetSystemProp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.SetSystemProp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_value_field(from._internal_value_field());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.event_type_ = from._impl_.event_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetSystemProp::CopyFrom(const SetSystemProp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.SetSystemProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSystemProp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SetSystemProp::InternalSwap(SetSystemProp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_field_, lhs_arena,
      &other->_impl_.value_field_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  swap(_impl_.event_type_, other->_impl_.event_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetSystemProp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[14]);
}

// ===================================================================

class GetSystemProp::_Internal {
 public:
  using HasBits = decltype(std::declval<GetSystemProp>()._impl_._has_bits_);
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value_field(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

GetSystemProp::GetSystemProp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.GetSystemProp)
}
GetSystemProp::GetSystemProp(const GetSystemProp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSystemProp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_field_){}
    , decltype(_impl_.event_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value_field()) {
    _this->_impl_.value_field_.Set(from._internal_value_field(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.event_type_ = from._impl_.event_type_;
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.GetSystemProp)
}

inline void GetSystemProp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_field_){}
    , decltype(_impl_.event_type_){0}
  };
  _impl_.value_field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetSystemProp::~GetSystemProp() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.GetSystemProp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSystemProp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_field_.Destroy();
}

void GetSystemProp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSystemProp::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.GetSystemProp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.value_field_.ClearNonDefaultToEmpty();
  }
  _impl_.event_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSystemProp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 event_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_event_type(&has_bits);
          _impl_.event_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string value_field = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value_field();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.GetSystemProp.value_field");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSystemProp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.GetSystemProp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 event_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_event_type(), target);
  }

  // required string value_field = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value_field().data(), static_cast<int>(this->_internal_value_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.GetSystemProp.value_field");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value_field(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.GetSystemProp)
  return target;
}

size_t GetSystemProp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cn.kylinos.kmre.kmrecore.GetSystemProp)
  size_t total_size = 0;

  if (_internal_has_value_field()) {
    // required string value_field = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value_field());
  }

  if (_internal_has_event_type()) {
    // required int32 event_type = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_event_type());
  }

  return total_size;
}
size_t GetSystemProp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.GetSystemProp)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string value_field = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value_field());

    // required int32 event_type = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_event_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSystemProp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSystemProp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSystemProp::GetClassData() const { return &_class_data_; }


void GetSystemProp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSystemProp*>(&to_msg);
  auto& from = static_cast<const GetSystemProp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.GetSystemProp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_value_field(from._internal_value_field());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.event_type_ = from._impl_.event_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSystemProp::CopyFrom(const GetSystemProp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.GetSystemProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSystemProp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GetSystemProp::InternalSwap(GetSystemProp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_field_, lhs_arena,
      &other->_impl_.value_field_, rhs_arena
  );
  swap(_impl_.event_type_, other->_impl_.event_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSystemProp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[15]);
}

// ===================================================================

class UpdateAppWindowSize::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateAppWindowSize>()._impl_._has_bits_);
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_display_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

UpdateAppWindowSize::UpdateAppWindowSize(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.UpdateAppWindowSize)
}
UpdateAppWindowSize::UpdateAppWindowSize(const UpdateAppWindowSize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateAppWindowSize* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.package_name_){}
    , decltype(_impl_.display_id_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_package_name()) {
    _this->_impl_.package_name_.Set(from._internal_package_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.display_id_, &from._impl_.display_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.display_id_)) + sizeof(_impl_.height_));
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.UpdateAppWindowSize)
}

inline void UpdateAppWindowSize::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.package_name_){}
    , decltype(_impl_.display_id_){0}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
  };
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateAppWindowSize::~UpdateAppWindowSize() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.UpdateAppWindowSize)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateAppWindowSize::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.package_name_.Destroy();
}

void UpdateAppWindowSize::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateAppWindowSize::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.UpdateAppWindowSize)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.package_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.display_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.height_) -
        reinterpret_cast<char*>(&_impl_.display_id_)) + sizeof(_impl_.height_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateAppWindowSize::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string package_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_package_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.UpdateAppWindowSize.package_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int32 display_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_display_id(&has_bits);
          _impl_.display_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateAppWindowSize::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.UpdateAppWindowSize)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string package_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_package_name().data(), static_cast<int>(this->_internal_package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.UpdateAppWindowSize.package_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_package_name(), target);
  }

  // required int32 display_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_display_id(), target);
  }

  // required int32 width = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_width(), target);
  }

  // required int32 height = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.UpdateAppWindowSize)
  return target;
}

size_t UpdateAppWindowSize::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cn.kylinos.kmre.kmrecore.UpdateAppWindowSize)
  size_t total_size = 0;

  if (_internal_has_package_name()) {
    // required string package_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_name());
  }

  if (_internal_has_display_id()) {
    // required int32 display_id = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_display_id());
  }

  if (_internal_has_width()) {
    // required int32 width = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  if (_internal_has_height()) {
    // required int32 height = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  return total_size;
}
size_t UpdateAppWindowSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.UpdateAppWindowSize)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string package_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_name());

    // required int32 display_id = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_display_id());

    // required int32 width = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());

    // required int32 height = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateAppWindowSize::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateAppWindowSize::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateAppWindowSize::GetClassData() const { return &_class_data_; }


void UpdateAppWindowSize::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateAppWindowSize*>(&to_msg);
  auto& from = static_cast<const UpdateAppWindowSize&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.UpdateAppWindowSize)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_package_name(from._internal_package_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.display_id_ = from._impl_.display_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.height_ = from._impl_.height_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateAppWindowSize::CopyFrom(const UpdateAppWindowSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.UpdateAppWindowSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAppWindowSize::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void UpdateAppWindowSize::InternalSwap(UpdateAppWindowSize* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.package_name_, lhs_arena,
      &other->_impl_.package_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateAppWindowSize, _impl_.height_)
      + sizeof(UpdateAppWindowSize::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(UpdateAppWindowSize, _impl_.display_id_)>(
          reinterpret_cast<char*>(&_impl_.display_id_),
          reinterpret_cast<char*>(&other->_impl_.display_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateAppWindowSize::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[16]);
}

// ===================================================================

class SetProxy::_Internal {
 public:
  using HasBits = decltype(std::declval<SetProxy>()._impl_._has_bits_);
  static void set_has_open(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_host(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

SetProxy::SetProxy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.SetProxy)
}
SetProxy::SetProxy(const SetProxy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetProxy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.host_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.open_){}
    , decltype(_impl_.port_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_host()) {
    _this->_impl_.host_.Set(from._internal_host(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_type()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.open_, &from._impl_.open_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.port_) -
    reinterpret_cast<char*>(&_impl_.open_)) + sizeof(_impl_.port_));
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.SetProxy)
}

inline void SetProxy::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.host_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.open_){false}
    , decltype(_impl_.port_){0}
  };
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetProxy::~SetProxy() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.SetProxy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetProxy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.host_.Destroy();
  _impl_.type_.Destroy();
}

void SetProxy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetProxy::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.SetProxy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.host_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.type_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.open_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.port_) -
        reinterpret_cast<char*>(&_impl_.open_)) + sizeof(_impl_.port_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetProxy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool open = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_open(&has_bits);
          _impl_.open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string host = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.SetProxy.host");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_port(&has_bits);
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.SetProxy.type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetProxy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.SetProxy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool open = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_open(), target);
  }

  // optional string host = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.SetProxy.host");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_host(), target);
  }

  // optional int32 port = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_port(), target);
  }

  // optional string type = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.SetProxy.type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.SetProxy)
  return target;
}

size_t SetProxy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.SetProxy)
  size_t total_size = 0;

  // required bool open = 1;
  if (_internal_has_open()) {
    total_size += 1 + 1;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string host = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_host());
    }

    // optional string type = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

  }
  // optional int32 port = 3;
  if (cached_has_bits & 0x00000008u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetProxy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetProxy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetProxy::GetClassData() const { return &_class_data_; }


void SetProxy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetProxy*>(&to_msg);
  auto& from = static_cast<const SetProxy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.SetProxy)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_host(from._internal_host());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.open_ = from._impl_.open_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.port_ = from._impl_.port_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetProxy::CopyFrom(const SetProxy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.SetProxy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetProxy::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SetProxy::InternalSwap(SetProxy* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_, lhs_arena,
      &other->_impl_.host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetProxy, _impl_.port_)
      + sizeof(SetProxy::_impl_.port_)
      - PROTOBUF_FIELD_OFFSET(SetProxy, _impl_.open_)>(
          reinterpret_cast<char*>(&_impl_.open_),
          reinterpret_cast<char*>(&other->_impl_.open_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetProxy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[17]);
}

// ===================================================================

class UpdateDisplaySize::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateDisplaySize>()._impl_._has_bits_);
  static void set_has_display_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

UpdateDisplaySize::UpdateDisplaySize(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.UpdateDisplaySize)
}
UpdateDisplaySize::UpdateDisplaySize(const UpdateDisplaySize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateDisplaySize* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.display_id_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.display_id_, &from._impl_.display_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.display_id_)) + sizeof(_impl_.height_));
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.UpdateDisplaySize)
}

inline void UpdateDisplaySize::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.display_id_){0}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
  };
}

UpdateDisplaySize::~UpdateDisplaySize() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.UpdateDisplaySize)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateDisplaySize::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UpdateDisplaySize::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateDisplaySize::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.UpdateDisplaySize)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.display_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.height_) -
        reinterpret_cast<char*>(&_impl_.display_id_)) + sizeof(_impl_.height_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateDisplaySize::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 display_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_display_id(&has_bits);
          _impl_.display_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateDisplaySize::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.UpdateDisplaySize)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 display_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_display_id(), target);
  }

  // required int32 width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_width(), target);
  }

  // required int32 height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.UpdateDisplaySize)
  return target;
}

size_t UpdateDisplaySize::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cn.kylinos.kmre.kmrecore.UpdateDisplaySize)
  size_t total_size = 0;

  if (_internal_has_display_id()) {
    // required int32 display_id = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_display_id());
  }

  if (_internal_has_width()) {
    // required int32 width = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  if (_internal_has_height()) {
    // required int32 height = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  return total_size;
}
size_t UpdateDisplaySize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.UpdateDisplaySize)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 display_id = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_display_id());

    // required int32 width = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());

    // required int32 height = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateDisplaySize::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateDisplaySize::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateDisplaySize::GetClassData() const { return &_class_data_; }


void UpdateDisplaySize::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateDisplaySize*>(&to_msg);
  auto& from = static_cast<const UpdateDisplaySize&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.UpdateDisplaySize)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.display_id_ = from._impl_.display_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.height_ = from._impl_.height_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateDisplaySize::CopyFrom(const UpdateDisplaySize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.UpdateDisplaySize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDisplaySize::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void UpdateDisplaySize::InternalSwap(UpdateDisplaySize* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateDisplaySize, _impl_.height_)
      + sizeof(UpdateDisplaySize::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(UpdateDisplaySize, _impl_.display_id_)>(
          reinterpret_cast<char*>(&_impl_.display_id_),
          reinterpret_cast<char*>(&other->_impl_.display_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateDisplaySize::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[18]);
}

// ===================================================================

class AnswerCall::_Internal {
 public:
  using HasBits = decltype(std::declval<AnswerCall>()._impl_._has_bits_);
  static void set_has_answer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AnswerCall::AnswerCall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.AnswerCall)
}
AnswerCall::AnswerCall(const AnswerCall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnswerCall* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.answer_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.answer_ = from._impl_.answer_;
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.AnswerCall)
}

inline void AnswerCall::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.answer_){false}
  };
}

AnswerCall::~AnswerCall() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.AnswerCall)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnswerCall::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AnswerCall::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnswerCall::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.AnswerCall)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.answer_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnswerCall::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool answer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_answer(&has_bits);
          _impl_.answer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnswerCall::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.AnswerCall)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool answer = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_answer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.AnswerCall)
  return target;
}

size_t AnswerCall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.AnswerCall)
  size_t total_size = 0;

  // required bool answer = 1;
  if (_internal_has_answer()) {
    total_size += 1 + 1;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnswerCall::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AnswerCall::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnswerCall::GetClassData() const { return &_class_data_; }


void AnswerCall::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AnswerCall*>(&to_msg);
  auto& from = static_cast<const AnswerCall&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.AnswerCall)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_answer()) {
    _this->_internal_set_answer(from._internal_answer());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnswerCall::CopyFrom(const AnswerCall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.AnswerCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnswerCall::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void AnswerCall::InternalSwap(AnswerCall* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.answer_, other->_impl_.answer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnswerCall::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[19]);
}

// ===================================================================

class ContainerEnvBootStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<ContainerEnvBootStatus>()._impl_._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_err_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

ContainerEnvBootStatus::ContainerEnvBootStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.ContainerEnvBootStatus)
}
ContainerEnvBootStatus::ContainerEnvBootStatus(const ContainerEnvBootStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContainerEnvBootStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.err_info_){}
    , decltype(_impl_.status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.err_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.err_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_err_info()) {
    _this->_impl_.err_info_.Set(from._internal_err_info(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.ContainerEnvBootStatus)
}

inline void ContainerEnvBootStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.err_info_){}
    , decltype(_impl_.status_){false}
  };
  _impl_.err_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.err_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ContainerEnvBootStatus::~ContainerEnvBootStatus() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.ContainerEnvBootStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContainerEnvBootStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.err_info_.Destroy();
}

void ContainerEnvBootStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContainerEnvBootStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.ContainerEnvBootStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.err_info_.ClearNonDefaultToEmpty();
  }
  _impl_.status_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerEnvBootStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_status(&has_bits);
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string err_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_err_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.ContainerEnvBootStatus.err_info");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContainerEnvBootStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.ContainerEnvBootStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool status = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_status(), target);
  }

  // optional string err_info = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_err_info().data(), static_cast<int>(this->_internal_err_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.ContainerEnvBootStatus.err_info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_err_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.ContainerEnvBootStatus)
  return target;
}

size_t ContainerEnvBootStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.ContainerEnvBootStatus)
  size_t total_size = 0;

  // required bool status = 1;
  if (_internal_has_status()) {
    total_size += 1 + 1;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string err_info = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err_info());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContainerEnvBootStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContainerEnvBootStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContainerEnvBootStatus::GetClassData() const { return &_class_data_; }


void ContainerEnvBootStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContainerEnvBootStatus*>(&to_msg);
  auto& from = static_cast<const ContainerEnvBootStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.ContainerEnvBootStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_err_info(from._internal_err_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContainerEnvBootStatus::CopyFrom(const ContainerEnvBootStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.ContainerEnvBootStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerEnvBootStatus::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ContainerEnvBootStatus::InternalSwap(ContainerEnvBootStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.err_info_, lhs_arena,
      &other->_impl_.err_info_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerEnvBootStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[20]);
}

// ===================================================================

class ActionResult::_Internal {
 public:
  using HasBits = decltype(std::declval<ActionResult>()._impl_._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_org_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_err_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

ActionResult::ActionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.ActionResult)
}
ActionResult::ActionResult(const ActionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActionResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.org_cmd_){}
    , decltype(_impl_.err_info_){}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.org_cmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.org_cmd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_org_cmd()) {
    _this->_impl_.org_cmd_.Set(from._internal_org_cmd(), 
      _this->GetArenaForAllocation());
  }
  _impl_.err_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.err_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_err_info()) {
    _this->_impl_.err_info_.Set(from._internal_err_info(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.ActionResult)
}

inline void ActionResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.org_cmd_){}
    , decltype(_impl_.err_info_){}
    , decltype(_impl_.result_){false}
  };
  _impl_.org_cmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.org_cmd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.err_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.err_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ActionResult::~ActionResult() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.ActionResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActionResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.org_cmd_.Destroy();
  _impl_.err_info_.Destroy();
}

void ActionResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.ActionResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.org_cmd_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.err_info_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.result_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string org_cmd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_org_cmd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.ActionResult.org_cmd");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string err_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_err_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.ActionResult.err_info");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActionResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.ActionResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool result = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  // required string org_cmd = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_org_cmd().data(), static_cast<int>(this->_internal_org_cmd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.ActionResult.org_cmd");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_org_cmd(), target);
  }

  // optional string err_info = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_err_info().data(), static_cast<int>(this->_internal_err_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.ActionResult.err_info");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_err_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.ActionResult)
  return target;
}

size_t ActionResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cn.kylinos.kmre.kmrecore.ActionResult)
  size_t total_size = 0;

  if (_internal_has_org_cmd()) {
    // required string org_cmd = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_org_cmd());
  }

  if (_internal_has_result()) {
    // required bool result = 1;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ActionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.ActionResult)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string org_cmd = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_org_cmd());

    // required bool result = 1;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string err_info = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err_info());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActionResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionResult::GetClassData() const { return &_class_data_; }


void ActionResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActionResult*>(&to_msg);
  auto& from = static_cast<const ActionResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.ActionResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_org_cmd(from._internal_org_cmd());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_err_info(from._internal_err_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionResult::CopyFrom(const ActionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.ActionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionResult::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ActionResult::InternalSwap(ActionResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.org_cmd_, lhs_arena,
      &other->_impl_.org_cmd_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.err_info_, lhs_arena,
      &other->_impl_.err_info_, rhs_arena
  );
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[21]);
}

// ===================================================================

class EventInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<EventInfo>()._impl_._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

EventInfo::EventInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.EventInfo)
}
EventInfo::EventInfo(const EventInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.package_name_){}
    , decltype(_impl_.event_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_package_name()) {
    _this->_impl_.package_name_.Set(from._internal_package_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.event_id_ = from._impl_.event_id_;
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.EventInfo)
}

inline void EventInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.package_name_){}
    , decltype(_impl_.event_id_){0}
  };
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventInfo::~EventInfo() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.EventInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.package_name_.Destroy();
}

void EventInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.EventInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.package_name_.ClearNonDefaultToEmpty();
  }
  _impl_.event_id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_event_id(&has_bits);
          _impl_.event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string package_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_package_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.EventInfo.package_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EventInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.EventInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 event_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_event_id(), target);
  }

  // optional string package_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_package_name().data(), static_cast<int>(this->_internal_package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.EventInfo.package_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_package_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.EventInfo)
  return target;
}

size_t EventInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.EventInfo)
  size_t total_size = 0;

  // required int32 event_id = 1;
  if (_internal_has_event_id()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_event_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string package_name = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventInfo::GetClassData() const { return &_class_data_; }


void EventInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventInfo*>(&to_msg);
  auto& from = static_cast<const EventInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.EventInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_package_name(from._internal_package_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventInfo::CopyFrom(const EventInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.EventInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void EventInfo::InternalSwap(EventInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.package_name_, lhs_arena,
      &other->_impl_.package_name_, rhs_arena
  );
  swap(_impl_.event_id_, other->_impl_.event_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[22]);
}

// ===================================================================

class InstalledAppItem::_Internal {
 public:
  using HasBits = decltype(std::declval<InstalledAppItem>()._impl_._has_bits_);
  static void set_has_app_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version_code(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_version_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_app_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000017) ^ 0x00000017) != 0;
  }
};

InstalledAppItem::InstalledAppItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.InstalledAppItem)
}
InstalledAppItem::InstalledAppItem(const InstalledAppItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InstalledAppItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.app_name_){}
    , decltype(_impl_.package_name_){}
    , decltype(_impl_.version_name_){}
    , decltype(_impl_.app_info_){}
    , decltype(_impl_.version_code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.app_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_app_name()) {
    _this->_impl_.app_name_.Set(from._internal_app_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_package_name()) {
    _this->_impl_.package_name_.Set(from._internal_package_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_version_name()) {
    _this->_impl_.version_name_.Set(from._internal_version_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_app_info()) {
    _this->_impl_.app_info_.Set(from._internal_app_info(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.version_code_ = from._impl_.version_code_;
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.InstalledAppItem)
}

inline void InstalledAppItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.app_name_){}
    , decltype(_impl_.package_name_){}
    , decltype(_impl_.version_name_){}
    , decltype(_impl_.app_info_){}
    , decltype(_impl_.version_code_){int64_t{0}}
  };
  _impl_.app_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InstalledAppItem::~InstalledAppItem() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.InstalledAppItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InstalledAppItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.app_name_.Destroy();
  _impl_.package_name_.Destroy();
  _impl_.version_name_.Destroy();
  _impl_.app_info_.Destroy();
}

void InstalledAppItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InstalledAppItem::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.InstalledAppItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.app_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.package_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.version_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.app_info_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.version_code_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstalledAppItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string app_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_app_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.InstalledAppItem.app_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string package_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_package_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.InstalledAppItem.package_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int64 version_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_version_code(&has_bits);
          _impl_.version_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string version_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_version_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.InstalledAppItem.version_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string app_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_app_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.InstalledAppItem.app_info");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InstalledAppItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.InstalledAppItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string app_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_app_name().data(), static_cast<int>(this->_internal_app_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.InstalledAppItem.app_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_name(), target);
  }

  // required string package_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_package_name().data(), static_cast<int>(this->_internal_package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.InstalledAppItem.package_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_package_name(), target);
  }

  // required int64 version_code = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_version_code(), target);
  }

  // required string version_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version_name().data(), static_cast<int>(this->_internal_version_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.InstalledAppItem.version_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_version_name(), target);
  }

  // optional string app_info = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_app_info().data(), static_cast<int>(this->_internal_app_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.InstalledAppItem.app_info");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_app_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.InstalledAppItem)
  return target;
}

size_t InstalledAppItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cn.kylinos.kmre.kmrecore.InstalledAppItem)
  size_t total_size = 0;

  if (_internal_has_app_name()) {
    // required string app_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_name());
  }

  if (_internal_has_package_name()) {
    // required string package_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_name());
  }

  if (_internal_has_version_name()) {
    // required string version_name = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_name());
  }

  if (_internal_has_version_code()) {
    // required int64 version_code = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_version_code());
  }

  return total_size;
}
size_t InstalledAppItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.InstalledAppItem)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000017) ^ 0x00000017) == 0) {  // All required fields are present.
    // required string app_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_name());

    // required string package_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_name());

    // required string version_name = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_name());

    // required int64 version_code = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_version_code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string app_info = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_info());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InstalledAppItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InstalledAppItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InstalledAppItem::GetClassData() const { return &_class_data_; }


void InstalledAppItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InstalledAppItem*>(&to_msg);
  auto& from = static_cast<const InstalledAppItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.InstalledAppItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_app_name(from._internal_app_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_package_name(from._internal_package_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_version_name(from._internal_version_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_app_info(from._internal_app_info());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.version_code_ = from._impl_.version_code_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InstalledAppItem::CopyFrom(const InstalledAppItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.InstalledAppItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstalledAppItem::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void InstalledAppItem::InternalSwap(InstalledAppItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_name_, lhs_arena,
      &other->_impl_.app_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.package_name_, lhs_arena,
      &other->_impl_.package_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_name_, lhs_arena,
      &other->_impl_.version_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_info_, lhs_arena,
      &other->_impl_.app_info_, rhs_arena
  );
  swap(_impl_.version_code_, other->_impl_.version_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InstalledAppItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[23]);
}

// ===================================================================

class InstalledAppList::_Internal {
 public:
  using HasBits = decltype(std::declval<InstalledAppList>()._impl_._has_bits_);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

InstalledAppList::InstalledAppList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.InstalledAppList)
}
InstalledAppList::InstalledAppList(const InstalledAppList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InstalledAppList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_){from._impl_.item_}
    , decltype(_impl_.size_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.size_ = from._impl_.size_;
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.InstalledAppList)
}

inline void InstalledAppList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_){arena}
    , decltype(_impl_.size_){0}
  };
}

InstalledAppList::~InstalledAppList() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.InstalledAppList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InstalledAppList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.item_.~RepeatedPtrField();
}

void InstalledAppList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InstalledAppList::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.InstalledAppList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_.Clear();
  _impl_.size_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstalledAppList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cn.kylinos.kmre.kmrecore.InstalledAppItem item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required int32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_size(&has_bits);
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InstalledAppList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.InstalledAppList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cn.kylinos.kmre.kmrecore.InstalledAppItem item = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_item_size()); i < n; i++) {
    const auto& repfield = this->_internal_item(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 size = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.InstalledAppList)
  return target;
}

size_t InstalledAppList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.InstalledAppList)
  size_t total_size = 0;

  // required int32 size = 2;
  if (_internal_has_size()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_size());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.kylinos.kmre.kmrecore.InstalledAppItem item = 1;
  total_size += 1UL * this->_internal_item_size();
  for (const auto& msg : this->_impl_.item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InstalledAppList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InstalledAppList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InstalledAppList::GetClassData() const { return &_class_data_; }


void InstalledAppList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InstalledAppList*>(&to_msg);
  auto& from = static_cast<const InstalledAppList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.InstalledAppList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.item_.MergeFrom(from._impl_.item_);
  if (from._internal_has_size()) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InstalledAppList::CopyFrom(const InstalledAppList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.InstalledAppList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstalledAppList::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.item_))
    return false;
  return true;
}

void InstalledAppList::InternalSwap(InstalledAppList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.item_.InternalSwap(&other->_impl_.item_);
  swap(_impl_.size_, other->_impl_.size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InstalledAppList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[24]);
}

// ===================================================================

class RunningAppItem::_Internal {
 public:
  using HasBits = decltype(std::declval<RunningAppItem>()._impl_._has_bits_);
  static void set_has_app_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

RunningAppItem::RunningAppItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.RunningAppItem)
}
RunningAppItem::RunningAppItem(const RunningAppItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RunningAppItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.app_name_){}
    , decltype(_impl_.package_name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.app_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_app_name()) {
    _this->_impl_.app_name_.Set(from._internal_app_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_package_name()) {
    _this->_impl_.package_name_.Set(from._internal_package_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.RunningAppItem)
}

inline void RunningAppItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.app_name_){}
    , decltype(_impl_.package_name_){}
  };
  _impl_.app_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RunningAppItem::~RunningAppItem() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.RunningAppItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RunningAppItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.app_name_.Destroy();
  _impl_.package_name_.Destroy();
}

void RunningAppItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RunningAppItem::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.RunningAppItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.app_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.package_name_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RunningAppItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string app_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_app_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.RunningAppItem.app_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string package_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_package_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.RunningAppItem.package_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RunningAppItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.RunningAppItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string app_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_app_name().data(), static_cast<int>(this->_internal_app_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.RunningAppItem.app_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_name(), target);
  }

  // required string package_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_package_name().data(), static_cast<int>(this->_internal_package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.RunningAppItem.package_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_package_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.RunningAppItem)
  return target;
}

size_t RunningAppItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cn.kylinos.kmre.kmrecore.RunningAppItem)
  size_t total_size = 0;

  if (_internal_has_app_name()) {
    // required string app_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_name());
  }

  if (_internal_has_package_name()) {
    // required string package_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_name());
  }

  return total_size;
}
size_t RunningAppItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.RunningAppItem)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string app_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_name());

    // required string package_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RunningAppItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RunningAppItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RunningAppItem::GetClassData() const { return &_class_data_; }


void RunningAppItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RunningAppItem*>(&to_msg);
  auto& from = static_cast<const RunningAppItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.RunningAppItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_app_name(from._internal_app_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_package_name(from._internal_package_name());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RunningAppItem::CopyFrom(const RunningAppItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.RunningAppItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunningAppItem::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void RunningAppItem::InternalSwap(RunningAppItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_name_, lhs_arena,
      &other->_impl_.app_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.package_name_, lhs_arena,
      &other->_impl_.package_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RunningAppItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[25]);
}

// ===================================================================

class RunningAppList::_Internal {
 public:
  using HasBits = decltype(std::declval<RunningAppList>()._impl_._has_bits_);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

RunningAppList::RunningAppList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.RunningAppList)
}
RunningAppList::RunningAppList(const RunningAppList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RunningAppList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_){from._impl_.item_}
    , decltype(_impl_.size_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.size_ = from._impl_.size_;
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.RunningAppList)
}

inline void RunningAppList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_){arena}
    , decltype(_impl_.size_){0}
  };
}

RunningAppList::~RunningAppList() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.RunningAppList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RunningAppList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.item_.~RepeatedPtrField();
}

void RunningAppList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RunningAppList::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.RunningAppList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_.Clear();
  _impl_.size_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RunningAppList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cn.kylinos.kmre.kmrecore.RunningAppItem item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required int32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_size(&has_bits);
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RunningAppList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.RunningAppList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cn.kylinos.kmre.kmrecore.RunningAppItem item = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_item_size()); i < n; i++) {
    const auto& repfield = this->_internal_item(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 size = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.RunningAppList)
  return target;
}

size_t RunningAppList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.RunningAppList)
  size_t total_size = 0;

  // required int32 size = 2;
  if (_internal_has_size()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_size());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.kylinos.kmre.kmrecore.RunningAppItem item = 1;
  total_size += 1UL * this->_internal_item_size();
  for (const auto& msg : this->_impl_.item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RunningAppList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RunningAppList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RunningAppList::GetClassData() const { return &_class_data_; }


void RunningAppList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RunningAppList*>(&to_msg);
  auto& from = static_cast<const RunningAppList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.RunningAppList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.item_.MergeFrom(from._impl_.item_);
  if (from._internal_has_size()) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RunningAppList::CopyFrom(const RunningAppList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.RunningAppList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunningAppList::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.item_))
    return false;
  return true;
}

void RunningAppList::InternalSwap(RunningAppList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.item_.InternalSwap(&other->_impl_.item_);
  swap(_impl_.size_, other->_impl_.size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RunningAppList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[26]);
}

// ===================================================================

class Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<Notification>()._impl_._has_bits_);
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_app_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_display_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hide(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_incoming_call(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Notification::Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.Notification)
}
Notification::Notification(const Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Notification* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.package_name_){}
    , decltype(_impl_.app_name_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.display_id_){}
    , decltype(_impl_.hide_){}
    , decltype(_impl_.incoming_call_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_package_name()) {
    _this->_impl_.package_name_.Set(from._internal_package_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_app_name()) {
    _this->_impl_.app_name_.Set(from._internal_app_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.display_id_, &from._impl_.display_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.incoming_call_) -
    reinterpret_cast<char*>(&_impl_.display_id_)) + sizeof(_impl_.incoming_call_));
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.Notification)
}

inline void Notification::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.package_name_){}
    , decltype(_impl_.app_name_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.display_id_){0}
    , decltype(_impl_.hide_){false}
    , decltype(_impl_.incoming_call_){false}
  };
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Notification::~Notification() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.Notification)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.package_name_.Destroy();
  _impl_.app_name_.Destroy();
  _impl_.text_.Destroy();
  _impl_.title_.Destroy();
}

void Notification::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.package_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.app_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.title_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&_impl_.display_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.incoming_call_) -
        reinterpret_cast<char*>(&_impl_.display_id_)) + sizeof(_impl_.incoming_call_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Notification::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string package_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_package_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.Notification.package_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string app_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_app_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.Notification.app_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.Notification.text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 display_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_display_id(&has_bits);
          _impl_.display_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool hide = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_hide(&has_bits);
          _impl_.hide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool incoming_call = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_incoming_call(&has_bits);
          _impl_.incoming_call_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string title = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.Notification.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string package_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_package_name().data(), static_cast<int>(this->_internal_package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.Notification.package_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_package_name(), target);
  }

  // required string app_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_app_name().data(), static_cast<int>(this->_internal_app_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.Notification.app_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_name(), target);
  }

  // optional string text = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.Notification.text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_text(), target);
  }

  // optional int32 display_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_display_id(), target);
  }

  // optional bool hide = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_hide(), target);
  }

  // optional bool incoming_call = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_incoming_call(), target);
  }

  // optional string title = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.Notification.title");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_title(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.Notification)
  return target;
}

size_t Notification::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cn.kylinos.kmre.kmrecore.Notification)
  size_t total_size = 0;

  if (_internal_has_package_name()) {
    // required string package_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_name());
  }

  if (_internal_has_app_name()) {
    // required string app_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_name());
  }

  return total_size;
}
size_t Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.Notification)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string package_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_name());

    // required string app_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007cu) {
    // optional string text = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional string title = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional int32 display_id = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_display_id());
    }

    // optional bool hide = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool incoming_call = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Notification::GetClassData() const { return &_class_data_; }


void Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Notification*>(&to_msg);
  auto& from = static_cast<const Notification&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.Notification)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_package_name(from._internal_package_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_app_name(from._internal_app_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.display_id_ = from._impl_.display_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.hide_ = from._impl_.hide_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.incoming_call_ = from._impl_.incoming_call_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Notification::CopyFrom(const Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Notification::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Notification::InternalSwap(Notification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.package_name_, lhs_arena,
      &other->_impl_.package_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_name_, lhs_arena,
      &other->_impl_.app_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Notification, _impl_.incoming_call_)
      + sizeof(Notification::_impl_.incoming_call_)
      - PROTOBUF_FIELD_OFFSET(Notification, _impl_.display_id_)>(
          reinterpret_cast<char*>(&_impl_.display_id_),
          reinterpret_cast<char*>(&other->_impl_.display_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Notification::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[27]);
}

// ===================================================================

class LaunchResult::_Internal {
 public:
  using HasBits = decltype(std::declval<LaunchResult>()._impl_._has_bits_);
  static void set_has_app_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_display_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_density(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fullscreen(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_app_resumed(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000ff) ^ 0x000000ff) != 0;
  }
};

LaunchResult::LaunchResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.LaunchResult)
}
LaunchResult::LaunchResult(const LaunchResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LaunchResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.app_name_){}
    , decltype(_impl_.package_name_){}
    , decltype(_impl_.display_id_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.density_){}
    , decltype(_impl_.result_){}
    , decltype(_impl_.fullscreen_){}
    , decltype(_impl_.exists_){}
    , decltype(_impl_.app_resumed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.app_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_app_name()) {
    _this->_impl_.app_name_.Set(from._internal_app_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_package_name()) {
    _this->_impl_.package_name_.Set(from._internal_package_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.display_id_, &from._impl_.display_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.app_resumed_) -
    reinterpret_cast<char*>(&_impl_.display_id_)) + sizeof(_impl_.app_resumed_));
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.LaunchResult)
}

inline void LaunchResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.app_name_){}
    , decltype(_impl_.package_name_){}
    , decltype(_impl_.display_id_){0}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
    , decltype(_impl_.density_){0}
    , decltype(_impl_.result_){false}
    , decltype(_impl_.fullscreen_){false}
    , decltype(_impl_.exists_){false}
    , decltype(_impl_.app_resumed_){false}
  };
  _impl_.app_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LaunchResult::~LaunchResult() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.LaunchResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LaunchResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.app_name_.Destroy();
  _impl_.package_name_.Destroy();
}

void LaunchResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LaunchResult::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.LaunchResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.app_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.package_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.display_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.fullscreen_) -
        reinterpret_cast<char*>(&_impl_.display_id_)) + sizeof(_impl_.fullscreen_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.exists_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.app_resumed_) -
        reinterpret_cast<char*>(&_impl_.exists_)) + sizeof(_impl_.app_resumed_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaunchResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string app_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_app_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.LaunchResult.app_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string package_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_package_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.LaunchResult.package_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required bool result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_result(&has_bits);
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 display_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_display_id(&has_bits);
          _impl_.display_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 density = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_density(&has_bits);
          _impl_.density_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool fullscreen = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_fullscreen(&has_bits);
          _impl_.fullscreen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool exists = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_exists(&has_bits);
          _impl_.exists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool app_resumed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_app_resumed(&has_bits);
          _impl_.app_resumed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LaunchResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.LaunchResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string app_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_app_name().data(), static_cast<int>(this->_internal_app_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.LaunchResult.app_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_name(), target);
  }

  // required string package_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_package_name().data(), static_cast<int>(this->_internal_package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.LaunchResult.package_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_package_name(), target);
  }

  // required bool result = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_result(), target);
  }

  // required int32 display_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_display_id(), target);
  }

  // required int32 width = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_width(), target);
  }

  // required int32 height = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_height(), target);
  }

  // required int32 density = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_density(), target);
  }

  // required bool fullscreen = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_fullscreen(), target);
  }

  // optional bool exists = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_exists(), target);
  }

  // optional bool app_resumed = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_app_resumed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.LaunchResult)
  return target;
}

size_t LaunchResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cn.kylinos.kmre.kmrecore.LaunchResult)
  size_t total_size = 0;

  if (_internal_has_app_name()) {
    // required string app_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_name());
  }

  if (_internal_has_package_name()) {
    // required string package_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_name());
  }

  if (_internal_has_display_id()) {
    // required int32 display_id = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_display_id());
  }

  if (_internal_has_width()) {
    // required int32 width = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  if (_internal_has_height()) {
    // required int32 height = 6;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  if (_internal_has_density()) {
    // required int32 density = 7;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_density());
  }

  if (_internal_has_result()) {
    // required bool result = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_fullscreen()) {
    // required bool fullscreen = 8;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t LaunchResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.LaunchResult)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required string app_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_name());

    // required string package_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_name());

    // required int32 display_id = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_display_id());

    // required int32 width = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());

    // required int32 height = 6;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());

    // required int32 density = 7;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_density());

    // required bool result = 3;
    total_size += 1 + 1;

    // required bool fullscreen = 8;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000300u) {
    // optional bool exists = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool app_resumed = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaunchResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LaunchResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaunchResult::GetClassData() const { return &_class_data_; }


void LaunchResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LaunchResult*>(&to_msg);
  auto& from = static_cast<const LaunchResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.LaunchResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_app_name(from._internal_app_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_package_name(from._internal_package_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.display_id_ = from._impl_.display_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.height_ = from._impl_.height_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.density_ = from._impl_.density_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.fullscreen_ = from._impl_.fullscreen_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.exists_ = from._impl_.exists_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.app_resumed_ = from._impl_.app_resumed_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaunchResult::CopyFrom(const LaunchResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.LaunchResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaunchResult::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void LaunchResult::InternalSwap(LaunchResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_name_, lhs_arena,
      &other->_impl_.app_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.package_name_, lhs_arena,
      &other->_impl_.package_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaunchResult, _impl_.app_resumed_)
      + sizeof(LaunchResult::_impl_.app_resumed_)
      - PROTOBUF_FIELD_OFFSET(LaunchResult, _impl_.display_id_)>(
          reinterpret_cast<char*>(&_impl_.display_id_),
          reinterpret_cast<char*>(&other->_impl_.display_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaunchResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[28]);
}

// ===================================================================

class CloseResult::_Internal {
 public:
  using HasBits = decltype(std::declval<CloseResult>()._impl_._has_bits_);
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CloseResult::CloseResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.CloseResult)
}
CloseResult::CloseResult(const CloseResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CloseResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.package_name_){}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_package_name()) {
    _this->_impl_.package_name_.Set(from._internal_package_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.CloseResult)
}

inline void CloseResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.package_name_){}
    , decltype(_impl_.result_){false}
  };
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CloseResult::~CloseResult() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.CloseResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CloseResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.package_name_.Destroy();
}

void CloseResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CloseResult::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.CloseResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.package_name_.ClearNonDefaultToEmpty();
  }
  _impl_.result_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string package_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_package_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.CloseResult.package_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required bool result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_result(&has_bits);
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CloseResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.CloseResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string package_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_package_name().data(), static_cast<int>(this->_internal_package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.CloseResult.package_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_package_name(), target);
  }

  // required bool result = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.CloseResult)
  return target;
}

size_t CloseResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cn.kylinos.kmre.kmrecore.CloseResult)
  size_t total_size = 0;

  if (_internal_has_package_name()) {
    // required string package_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_name());
  }

  if (_internal_has_result()) {
    // required bool result = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CloseResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.CloseResult)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string package_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_name());

    // required bool result = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CloseResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CloseResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CloseResult::GetClassData() const { return &_class_data_; }


void CloseResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CloseResult*>(&to_msg);
  auto& from = static_cast<const CloseResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.CloseResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_package_name(from._internal_package_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CloseResult::CopyFrom(const CloseResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.CloseResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseResult::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CloseResult::InternalSwap(CloseResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.package_name_, lhs_arena,
      &other->_impl_.package_name_, rhs_arena
  );
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[29]);
}

// ===================================================================

class VirtualScreenFocusResult::_Internal {
 public:
  using HasBits = decltype(std::declval<VirtualScreenFocusResult>()._impl_._has_bits_);
  static void set_has_display_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

VirtualScreenFocusResult::VirtualScreenFocusResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.VirtualScreenFocusResult)
}
VirtualScreenFocusResult::VirtualScreenFocusResult(const VirtualScreenFocusResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VirtualScreenFocusResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.display_id_){}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.display_id_, &from._impl_.display_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.display_id_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.VirtualScreenFocusResult)
}

inline void VirtualScreenFocusResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.display_id_){0}
    , decltype(_impl_.result_){false}
  };
}

VirtualScreenFocusResult::~VirtualScreenFocusResult() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.VirtualScreenFocusResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VirtualScreenFocusResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VirtualScreenFocusResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VirtualScreenFocusResult::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.VirtualScreenFocusResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.display_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.result_) -
        reinterpret_cast<char*>(&_impl_.display_id_)) + sizeof(_impl_.result_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtualScreenFocusResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 display_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_display_id(&has_bits);
          _impl_.display_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_result(&has_bits);
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VirtualScreenFocusResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.VirtualScreenFocusResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 display_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_display_id(), target);
  }

  // required bool result = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.VirtualScreenFocusResult)
  return target;
}

size_t VirtualScreenFocusResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cn.kylinos.kmre.kmrecore.VirtualScreenFocusResult)
  size_t total_size = 0;

  if (_internal_has_display_id()) {
    // required int32 display_id = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_display_id());
  }

  if (_internal_has_result()) {
    // required bool result = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t VirtualScreenFocusResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.VirtualScreenFocusResult)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 display_id = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_display_id());

    // required bool result = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtualScreenFocusResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VirtualScreenFocusResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtualScreenFocusResult::GetClassData() const { return &_class_data_; }


void VirtualScreenFocusResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VirtualScreenFocusResult*>(&to_msg);
  auto& from = static_cast<const VirtualScreenFocusResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.VirtualScreenFocusResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.display_id_ = from._impl_.display_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtualScreenFocusResult::CopyFrom(const VirtualScreenFocusResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.VirtualScreenFocusResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualScreenFocusResult::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void VirtualScreenFocusResult::InternalSwap(VirtualScreenFocusResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VirtualScreenFocusResult, _impl_.result_)
      + sizeof(VirtualScreenFocusResult::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(VirtualScreenFocusResult, _impl_.display_id_)>(
          reinterpret_cast<char*>(&_impl_.display_id_),
          reinterpret_cast<char*>(&other->_impl_.display_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtualScreenFocusResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[30]);
}

// ===================================================================

class InputMethodRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<InputMethodRequest>()._impl_._has_bits_);
  static void set_has_display_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_x_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_y_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

InputMethodRequest::InputMethodRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.InputMethodRequest)
}
InputMethodRequest::InputMethodRequest(const InputMethodRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InputMethodRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.package_name_){}
    , decltype(_impl_.display_id_){}
    , decltype(_impl_.ret_){}
    , decltype(_impl_.x_pos_){}
    , decltype(_impl_.y_pos_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_package_name()) {
    _this->_impl_.package_name_.Set(from._internal_package_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.display_id_, &from._impl_.display_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_pos_) -
    reinterpret_cast<char*>(&_impl_.display_id_)) + sizeof(_impl_.y_pos_));
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.InputMethodRequest)
}

inline void InputMethodRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.package_name_){}
    , decltype(_impl_.display_id_){0}
    , decltype(_impl_.ret_){false}
    , decltype(_impl_.x_pos_){0}
    , decltype(_impl_.y_pos_){0}
  };
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InputMethodRequest::~InputMethodRequest() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.InputMethodRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InputMethodRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.package_name_.Destroy();
}

void InputMethodRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InputMethodRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.InputMethodRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.package_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.display_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.y_pos_) -
        reinterpret_cast<char*>(&_impl_.display_id_)) + sizeof(_impl_.y_pos_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputMethodRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 display_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_display_id(&has_bits);
          _impl_.display_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string package_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_package_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.InputMethodRequest.package_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required bool ret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ret(&has_bits);
          _impl_.ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 x_pos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_x_pos(&has_bits);
          _impl_.x_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 y_pos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_y_pos(&has_bits);
          _impl_.y_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InputMethodRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.InputMethodRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 display_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_display_id(), target);
  }

  // required string package_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_package_name().data(), static_cast<int>(this->_internal_package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.InputMethodRequest.package_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_package_name(), target);
  }

  // required bool ret = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_ret(), target);
  }

  // optional int32 x_pos = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_x_pos(), target);
  }

  // optional int32 y_pos = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_y_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.InputMethodRequest)
  return target;
}

size_t InputMethodRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cn.kylinos.kmre.kmrecore.InputMethodRequest)
  size_t total_size = 0;

  if (_internal_has_package_name()) {
    // required string package_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_name());
  }

  if (_internal_has_display_id()) {
    // required int32 display_id = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_display_id());
  }

  if (_internal_has_ret()) {
    // required bool ret = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t InputMethodRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.InputMethodRequest)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string package_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_name());

    // required int32 display_id = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_display_id());

    // required bool ret = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000018u) {
    // optional int32 x_pos = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x_pos());
    }

    // optional int32 y_pos = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y_pos());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InputMethodRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InputMethodRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InputMethodRequest::GetClassData() const { return &_class_data_; }


void InputMethodRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InputMethodRequest*>(&to_msg);
  auto& from = static_cast<const InputMethodRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.InputMethodRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_package_name(from._internal_package_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.display_id_ = from._impl_.display_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ret_ = from._impl_.ret_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.x_pos_ = from._impl_.x_pos_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.y_pos_ = from._impl_.y_pos_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InputMethodRequest::CopyFrom(const InputMethodRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.InputMethodRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputMethodRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void InputMethodRequest::InternalSwap(InputMethodRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.package_name_, lhs_arena,
      &other->_impl_.package_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InputMethodRequest, _impl_.y_pos_)
      + sizeof(InputMethodRequest::_impl_.y_pos_)
      - PROTOBUF_FIELD_OFFSET(InputMethodRequest, _impl_.display_id_)>(
          reinterpret_cast<char*>(&_impl_.display_id_),
          reinterpret_cast<char*>(&other->_impl_.display_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InputMethodRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[31]);
}

// ===================================================================

class SingleFile::_Internal {
 public:
  using HasBits = decltype(std::declval<SingleFile>()._impl_._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mime_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SingleFile::SingleFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.SingleFile)
}
SingleFile::SingleFile(const SingleFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleFile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){}
    , decltype(_impl_.mime_type_){}
    , decltype(_impl_.package_name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mime_type()) {
    _this->_impl_.mime_type_.Set(from._internal_mime_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_package_name()) {
    _this->_impl_.package_name_.Set(from._internal_package_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.SingleFile)
}

inline void SingleFile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){}
    , decltype(_impl_.mime_type_){}
    , decltype(_impl_.package_name_){}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SingleFile::~SingleFile() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.SingleFile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleFile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
  _impl_.mime_type_.Destroy();
  _impl_.package_name_.Destroy();
}

void SingleFile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleFile::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.SingleFile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.mime_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.package_name_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleFile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.SingleFile.data");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string mime_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.SingleFile.mime_type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string package_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_package_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.SingleFile.package_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleFile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.SingleFile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.SingleFile.data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data(), target);
  }

  // required string mime_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mime_type().data(), static_cast<int>(this->_internal_mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.SingleFile.mime_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mime_type(), target);
  }

  // optional string package_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_package_name().data(), static_cast<int>(this->_internal_package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.SingleFile.package_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_package_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.SingleFile)
  return target;
}

size_t SingleFile::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cn.kylinos.kmre.kmrecore.SingleFile)
  size_t total_size = 0;

  if (_internal_has_data()) {
    // required string data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  if (_internal_has_mime_type()) {
    // required string mime_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());
  }

  return total_size;
}
size_t SingleFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.SingleFile)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());

    // required string mime_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string package_name = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleFile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleFile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleFile::GetClassData() const { return &_class_data_; }


void SingleFile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleFile*>(&to_msg);
  auto& from = static_cast<const SingleFile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.SingleFile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_mime_type(from._internal_mime_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_package_name(from._internal_package_name());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleFile::CopyFrom(const SingleFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.SingleFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleFile::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SingleFile::InternalSwap(SingleFile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mime_type_, lhs_arena,
      &other->_impl_.mime_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.package_name_, lhs_arena,
      &other->_impl_.package_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleFile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[32]);
}

// ===================================================================

class FilesList::_Internal {
 public:
  using HasBits = decltype(std::declval<FilesList>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

FilesList::FilesList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.FilesList)
}
FilesList::FilesList(const FilesList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FilesList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_){from._impl_.item_}
    , decltype(_impl_.type_){}
    , decltype(_impl_.size_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.size_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.size_));
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.FilesList)
}

inline void FilesList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_){arena}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.size_){0}
  };
}

FilesList::~FilesList() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.FilesList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FilesList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.item_.~RepeatedPtrField();
}

void FilesList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FilesList::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.FilesList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.size_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.size_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FilesList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.kylinos.kmre.kmrecore.SingleFile item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required int32 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_size(&has_bits);
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FilesList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.FilesList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // repeated .cn.kylinos.kmre.kmrecore.SingleFile item = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_item_size()); i < n; i++) {
    const auto& repfield = this->_internal_item(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required int32 size = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.FilesList)
  return target;
}

size_t FilesList::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cn.kylinos.kmre.kmrecore.FilesList)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required int32 type = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  if (_internal_has_size()) {
    // required int32 size = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_size());
  }

  return total_size;
}
size_t FilesList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.FilesList)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 type = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());

    // required int32 size = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.kylinos.kmre.kmrecore.SingleFile item = 2;
  total_size += 1UL * this->_internal_item_size();
  for (const auto& msg : this->_impl_.item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FilesList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FilesList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FilesList::GetClassData() const { return &_class_data_; }


void FilesList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FilesList*>(&to_msg);
  auto& from = static_cast<const FilesList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.FilesList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.item_.MergeFrom(from._impl_.item_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.size_ = from._impl_.size_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FilesList::CopyFrom(const FilesList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.FilesList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilesList::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.item_))
    return false;
  return true;
}

void FilesList::InternalSwap(FilesList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.item_.InternalSwap(&other->_impl_.item_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FilesList, _impl_.size_)
      + sizeof(FilesList::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(FilesList, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FilesList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[33]);
}

// ===================================================================

class MediaPlayStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaPlayStatus>()._impl_._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

MediaPlayStatus::MediaPlayStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.MediaPlayStatus)
}
MediaPlayStatus::MediaPlayStatus(const MediaPlayStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MediaPlayStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.MediaPlayStatus)
}

inline void MediaPlayStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){false}
  };
}

MediaPlayStatus::~MediaPlayStatus() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.MediaPlayStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MediaPlayStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MediaPlayStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MediaPlayStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.MediaPlayStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MediaPlayStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MediaPlayStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.MediaPlayStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.MediaPlayStatus)
  return target;
}

size_t MediaPlayStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.MediaPlayStatus)
  size_t total_size = 0;

  // required bool result = 1;
  if (_internal_has_result()) {
    total_size += 1 + 1;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MediaPlayStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MediaPlayStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MediaPlayStatus::GetClassData() const { return &_class_data_; }


void MediaPlayStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MediaPlayStatus*>(&to_msg);
  auto& from = static_cast<const MediaPlayStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.MediaPlayStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MediaPlayStatus::CopyFrom(const MediaPlayStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.MediaPlayStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaPlayStatus::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void MediaPlayStatus::InternalSwap(MediaPlayStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaPlayStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[34]);
}

// ===================================================================

class AppMultiplier::_Internal {
 public:
  using HasBits = decltype(std::declval<AppMultiplier>()._impl_._has_bits_);
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_multiplier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

AppMultiplier::AppMultiplier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.AppMultiplier)
}
AppMultiplier::AppMultiplier(const AppMultiplier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppMultiplier* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.package_name_){}
    , decltype(_impl_.info_){}
    , decltype(_impl_.multiplier_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_package_name()) {
    _this->_impl_.package_name_.Set(from._internal_package_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_info()) {
    _this->_impl_.info_.Set(from._internal_info(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.multiplier_ = from._impl_.multiplier_;
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.AppMultiplier)
}

inline void AppMultiplier::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.package_name_){}
    , decltype(_impl_.info_){}
    , decltype(_impl_.multiplier_){0}
  };
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AppMultiplier::~AppMultiplier() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.AppMultiplier)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppMultiplier::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.package_name_.Destroy();
  _impl_.info_.Destroy();
}

void AppMultiplier::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppMultiplier::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.AppMultiplier)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.package_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.info_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.multiplier_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppMultiplier::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string package_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_package_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.AppMultiplier.package_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int32 multiplier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_multiplier(&has_bits);
          _impl_.multiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.AppMultiplier.info");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppMultiplier::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.AppMultiplier)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string package_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_package_name().data(), static_cast<int>(this->_internal_package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.AppMultiplier.package_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_package_name(), target);
  }

  // required int32 multiplier = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_multiplier(), target);
  }

  // optional string info = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.AppMultiplier.info");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.AppMultiplier)
  return target;
}

size_t AppMultiplier::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cn.kylinos.kmre.kmrecore.AppMultiplier)
  size_t total_size = 0;

  if (_internal_has_package_name()) {
    // required string package_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_name());
  }

  if (_internal_has_multiplier()) {
    // required int32 multiplier = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_multiplier());
  }

  return total_size;
}
size_t AppMultiplier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.AppMultiplier)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string package_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_name());

    // required int32 multiplier = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_multiplier());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string info = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppMultiplier::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppMultiplier::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppMultiplier::GetClassData() const { return &_class_data_; }


void AppMultiplier::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppMultiplier*>(&to_msg);
  auto& from = static_cast<const AppMultiplier&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.AppMultiplier)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_package_name(from._internal_package_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_info(from._internal_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.multiplier_ = from._impl_.multiplier_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppMultiplier::CopyFrom(const AppMultiplier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.AppMultiplier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppMultiplier::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void AppMultiplier::InternalSwap(AppMultiplier* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.package_name_, lhs_arena,
      &other->_impl_.package_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.info_, lhs_arena,
      &other->_impl_.info_, rhs_arena
  );
  swap(_impl_.multiplier_, other->_impl_.multiplier_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppMultiplier::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[35]);
}

// ===================================================================

class AppMultiplierList::_Internal {
 public:
  using HasBits = decltype(std::declval<AppMultiplierList>()._impl_._has_bits_);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AppMultiplierList::AppMultiplierList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.AppMultiplierList)
}
AppMultiplierList::AppMultiplierList(const AppMultiplierList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppMultiplierList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_){from._impl_.item_}
    , decltype(_impl_.size_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.size_ = from._impl_.size_;
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.AppMultiplierList)
}

inline void AppMultiplierList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_){arena}
    , decltype(_impl_.size_){0}
  };
}

AppMultiplierList::~AppMultiplierList() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.AppMultiplierList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppMultiplierList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.item_.~RepeatedPtrField();
}

void AppMultiplierList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppMultiplierList::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.AppMultiplierList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_.Clear();
  _impl_.size_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppMultiplierList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cn.kylinos.kmre.kmrecore.AppMultiplier item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required int32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_size(&has_bits);
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppMultiplierList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.AppMultiplierList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cn.kylinos.kmre.kmrecore.AppMultiplier item = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_item_size()); i < n; i++) {
    const auto& repfield = this->_internal_item(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 size = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.AppMultiplierList)
  return target;
}

size_t AppMultiplierList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.AppMultiplierList)
  size_t total_size = 0;

  // required int32 size = 2;
  if (_internal_has_size()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_size());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.kylinos.kmre.kmrecore.AppMultiplier item = 1;
  total_size += 1UL * this->_internal_item_size();
  for (const auto& msg : this->_impl_.item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppMultiplierList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppMultiplierList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppMultiplierList::GetClassData() const { return &_class_data_; }


void AppMultiplierList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppMultiplierList*>(&to_msg);
  auto& from = static_cast<const AppMultiplierList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.AppMultiplierList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.item_.MergeFrom(from._impl_.item_);
  if (from._internal_has_size()) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppMultiplierList::CopyFrom(const AppMultiplierList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.AppMultiplierList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppMultiplierList::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.item_))
    return false;
  return true;
}

void AppMultiplierList::InternalSwap(AppMultiplierList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.item_.InternalSwap(&other->_impl_.item_);
  swap(_impl_.size_, other->_impl_.size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppMultiplierList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[36]);
}

// ===================================================================

class Info::_Internal {
 public:
  using HasBits = decltype(std::declval<Info>()._impl_._has_bits_);
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value1(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_value2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_value3(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value4(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

Info::Info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.Info)
}
Info::Info(const Info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Info* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.package_name_){}
    , decltype(_impl_.value3_){}
    , decltype(_impl_.value4_){}
    , decltype(_impl_.value1_){}
    , decltype(_impl_.value2_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_package_name()) {
    _this->_impl_.package_name_.Set(from._internal_package_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value3_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value3()) {
    _this->_impl_.value3_.Set(from._internal_value3(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value4_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value4_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value4()) {
    _this->_impl_.value4_.Set(from._internal_value4(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.value1_, &from._impl_.value1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value2_) -
    reinterpret_cast<char*>(&_impl_.value1_)) + sizeof(_impl_.value2_));
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.Info)
}

inline void Info::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.package_name_){}
    , decltype(_impl_.value3_){}
    , decltype(_impl_.value4_){}
    , decltype(_impl_.value1_){0}
    , decltype(_impl_.value2_){0}
  };
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value3_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value4_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value4_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Info::~Info() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.Info)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Info::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.package_name_.Destroy();
  _impl_.value3_.Destroy();
  _impl_.value4_.Destroy();
}

void Info::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Info::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.Info)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.package_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.value3_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.value4_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.value1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.value2_) -
        reinterpret_cast<char*>(&_impl_.value1_)) + sizeof(_impl_.value2_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Info::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string package_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_package_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.Info.package_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 value1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_value1(&has_bits);
          _impl_.value1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 value2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_value2(&has_bits);
          _impl_.value2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string value3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_value3();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.Info.value3");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string value4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_value4();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.Info.value4");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Info::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.Info)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string package_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_package_name().data(), static_cast<int>(this->_internal_package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.Info.package_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_package_name(), target);
  }

  // optional int32 value1 = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_value1(), target);
  }

  // optional int32 value2 = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_value2(), target);
  }

  // optional string value3 = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value3().data(), static_cast<int>(this->_internal_value3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.Info.value3");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_value3(), target);
  }

  // optional string value4 = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value4().data(), static_cast<int>(this->_internal_value4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.Info.value4");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_value4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.Info)
  return target;
}

size_t Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.Info)
  size_t total_size = 0;

  // required string package_name = 1;
  if (_internal_has_package_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_name());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional string value3 = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value3());
    }

    // optional string value4 = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value4());
    }

    // optional int32 value1 = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value1());
    }

    // optional int32 value2 = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value2());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Info::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Info::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Info::GetClassData() const { return &_class_data_; }


void Info::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Info*>(&to_msg);
  auto& from = static_cast<const Info&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.Info)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_package_name(from._internal_package_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_value3(from._internal_value3());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_value4(from._internal_value4());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.value1_ = from._impl_.value1_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.value2_ = from._impl_.value2_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Info::CopyFrom(const Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Info::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Info::InternalSwap(Info* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.package_name_, lhs_arena,
      &other->_impl_.package_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value3_, lhs_arena,
      &other->_impl_.value3_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value4_, lhs_arena,
      &other->_impl_.value4_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Info, _impl_.value2_)
      + sizeof(Info::_impl_.value2_)
      - PROTOBUF_FIELD_OFFSET(Info, _impl_.value1_)>(
          reinterpret_cast<char*>(&_impl_.value1_),
          reinterpret_cast<char*>(&other->_impl_.value1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Info::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[37]);
}

// ===================================================================

class GetInfoList::_Internal {
 public:
  using HasBits = decltype(std::declval<GetInfoList>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

GetInfoList::GetInfoList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.GetInfoList)
}
GetInfoList::GetInfoList(const GetInfoList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetInfoList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_){from._impl_.item_}
    , decltype(_impl_.type_){}
    , decltype(_impl_.size_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_type()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.size_ = from._impl_.size_;
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.GetInfoList)
}

inline void GetInfoList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_){arena}
    , decltype(_impl_.type_){}
    , decltype(_impl_.size_){0}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetInfoList::~GetInfoList() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.GetInfoList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetInfoList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.item_.~RepeatedPtrField();
  _impl_.type_.Destroy();
}

void GetInfoList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetInfoList::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.GetInfoList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.type_.ClearNonDefaultToEmpty();
  }
  _impl_.size_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetInfoList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cn.kylinos.kmre.kmrecore.Info item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.GetInfoList.type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int32 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_size(&has_bits);
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetInfoList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.GetInfoList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cn.kylinos.kmre.kmrecore.Info item = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_item_size()); i < n; i++) {
    const auto& repfield = this->_internal_item(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required string type = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.GetInfoList.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // required int32 size = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.GetInfoList)
  return target;
}

size_t GetInfoList::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cn.kylinos.kmre.kmrecore.GetInfoList)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required string type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  if (_internal_has_size()) {
    // required int32 size = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_size());
  }

  return total_size;
}
size_t GetInfoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.GetInfoList)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());

    // required int32 size = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.kylinos.kmre.kmrecore.Info item = 1;
  total_size += 1UL * this->_internal_item_size();
  for (const auto& msg : this->_impl_.item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetInfoList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetInfoList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetInfoList::GetClassData() const { return &_class_data_; }


void GetInfoList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetInfoList*>(&to_msg);
  auto& from = static_cast<const GetInfoList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.GetInfoList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.item_.MergeFrom(from._impl_.item_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.size_ = from._impl_.size_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetInfoList::CopyFrom(const GetInfoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.GetInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInfoList::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.item_))
    return false;
  return true;
}

void GetInfoList::InternalSwap(GetInfoList* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.item_.InternalSwap(&other->_impl_.item_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  swap(_impl_.size_, other->_impl_.size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInfoList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[38]);
}

// ===================================================================

class ResponseInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ResponseInfo>()._impl_._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_category(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001b) ^ 0x0000001b) != 0;
  }
};

ResponseInfo::ResponseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.ResponseInfo)
}
ResponseInfo::ResponseInfo(const ResponseInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.package_name_){}
    , decltype(_impl_.category_){}
    , decltype(_impl_.info_){}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.ret_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_package_name()) {
    _this->_impl_.package_name_.Set(from._internal_package_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_category()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_info()) {
    _this->_impl_.info_.Set(from._internal_info(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.event_id_, &from._impl_.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ret_) -
    reinterpret_cast<char*>(&_impl_.event_id_)) + sizeof(_impl_.ret_));
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.ResponseInfo)
}

inline void ResponseInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.package_name_){}
    , decltype(_impl_.category_){}
    , decltype(_impl_.info_){}
    , decltype(_impl_.event_id_){0}
    , decltype(_impl_.ret_){0}
  };
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResponseInfo::~ResponseInfo() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.ResponseInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.package_name_.Destroy();
  _impl_.category_.Destroy();
  _impl_.info_.Destroy();
}

void ResponseInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.ResponseInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.package_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.category_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.info_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ret_) -
        reinterpret_cast<char*>(&_impl_.event_id_)) + sizeof(_impl_.ret_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_event_id(&has_bits);
          _impl_.event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string package_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_package_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.ResponseInfo.package_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string category = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.ResponseInfo.category");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int32 ret = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_ret(&has_bits);
          _impl_.ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.ResponseInfo.info");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.ResponseInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 event_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_event_id(), target);
  }

  // required string package_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_package_name().data(), static_cast<int>(this->_internal_package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.ResponseInfo.package_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_package_name(), target);
  }

  // required string category = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.ResponseInfo.category");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_category(), target);
  }

  // required int32 ret = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_ret(), target);
  }

  // optional string info = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.ResponseInfo.info");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.ResponseInfo)
  return target;
}

size_t ResponseInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cn.kylinos.kmre.kmrecore.ResponseInfo)
  size_t total_size = 0;

  if (_internal_has_package_name()) {
    // required string package_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_name());
  }

  if (_internal_has_category()) {
    // required string category = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  if (_internal_has_event_id()) {
    // required int32 event_id = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_event_id());
  }

  if (_internal_has_ret()) {
    // required int32 ret = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ret());
  }

  return total_size;
}
size_t ResponseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.ResponseInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001b) ^ 0x0000001b) == 0) {  // All required fields are present.
    // required string package_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_name());

    // required string category = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());

    // required int32 event_id = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_event_id());

    // required int32 ret = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string info = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseInfo::GetClassData() const { return &_class_data_; }


void ResponseInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseInfo*>(&to_msg);
  auto& from = static_cast<const ResponseInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.ResponseInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_package_name(from._internal_package_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_category(from._internal_category());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_info(from._internal_info());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.ret_ = from._impl_.ret_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseInfo::CopyFrom(const ResponseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.ResponseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ResponseInfo::InternalSwap(ResponseInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.package_name_, lhs_arena,
      &other->_impl_.package_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.info_, lhs_arena,
      &other->_impl_.info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseInfo, _impl_.ret_)
      + sizeof(ResponseInfo::_impl_.ret_)
      - PROTOBUF_FIELD_OFFSET(ResponseInfo, _impl_.event_id_)>(
          reinterpret_cast<char*>(&_impl_.event_id_),
          reinterpret_cast<char*>(&other->_impl_.event_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[39]);
}

// ===================================================================

class MultiplierSwitch::_Internal {
 public:
  using HasBits = decltype(std::declval<MultiplierSwitch>()._impl_._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

MultiplierSwitch::MultiplierSwitch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.MultiplierSwitch)
}
MultiplierSwitch::MultiplierSwitch(const MultiplierSwitch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiplierSwitch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.package_name_){}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.enable_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_package_name()) {
    _this->_impl_.package_name_.Set(from._internal_package_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.event_id_, &from._impl_.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.enable_) -
    reinterpret_cast<char*>(&_impl_.event_id_)) + sizeof(_impl_.enable_));
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.MultiplierSwitch)
}

inline void MultiplierSwitch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.package_name_){}
    , decltype(_impl_.event_id_){0}
    , decltype(_impl_.enable_){false}
  };
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MultiplierSwitch::~MultiplierSwitch() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.MultiplierSwitch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiplierSwitch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.package_name_.Destroy();
}

void MultiplierSwitch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiplierSwitch::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.MultiplierSwitch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.package_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.enable_) -
        reinterpret_cast<char*>(&_impl_.event_id_)) + sizeof(_impl_.enable_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiplierSwitch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_event_id(&has_bits);
          _impl_.event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string package_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_package_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.MultiplierSwitch.package_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required bool enable = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_enable(&has_bits);
          _impl_.enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiplierSwitch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.MultiplierSwitch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 event_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_event_id(), target);
  }

  // required string package_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_package_name().data(), static_cast<int>(this->_internal_package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.MultiplierSwitch.package_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_package_name(), target);
  }

  // required bool enable = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.MultiplierSwitch)
  return target;
}

size_t MultiplierSwitch::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cn.kylinos.kmre.kmrecore.MultiplierSwitch)
  size_t total_size = 0;

  if (_internal_has_package_name()) {
    // required string package_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_name());
  }

  if (_internal_has_event_id()) {
    // required int32 event_id = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_event_id());
  }

  if (_internal_has_enable()) {
    // required bool enable = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t MultiplierSwitch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.MultiplierSwitch)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string package_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_name());

    // required int32 event_id = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_event_id());

    // required bool enable = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiplierSwitch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiplierSwitch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiplierSwitch::GetClassData() const { return &_class_data_; }


void MultiplierSwitch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiplierSwitch*>(&to_msg);
  auto& from = static_cast<const MultiplierSwitch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.MultiplierSwitch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_package_name(from._internal_package_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.enable_ = from._impl_.enable_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiplierSwitch::CopyFrom(const MultiplierSwitch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.MultiplierSwitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiplierSwitch::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void MultiplierSwitch::InternalSwap(MultiplierSwitch* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.package_name_, lhs_arena,
      &other->_impl_.package_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MultiplierSwitch, _impl_.enable_)
      + sizeof(MultiplierSwitch::_impl_.enable_)
      - PROTOBUF_FIELD_OFFSET(MultiplierSwitch, _impl_.event_id_)>(
          reinterpret_cast<char*>(&_impl_.event_id_),
          reinterpret_cast<char*>(&other->_impl_.event_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiplierSwitch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[40]);
}

// ===================================================================

class LinkOpen::_Internal {
 public:
  using HasBits = decltype(std::declval<LinkOpen>()._impl_._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

LinkOpen::LinkOpen(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.LinkOpen)
}
LinkOpen::LinkOpen(const LinkOpen& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LinkOpen* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.url_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.LinkOpen)
}

inline void LinkOpen::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.url_){}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LinkOpen::~LinkOpen() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.LinkOpen)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LinkOpen::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
}

void LinkOpen::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LinkOpen::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.LinkOpen)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.url_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinkOpen::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.LinkOpen.url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LinkOpen::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.LinkOpen)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.LinkOpen.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.LinkOpen)
  return target;
}

size_t LinkOpen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.LinkOpen)
  size_t total_size = 0;

  // required string url = 1;
  if (_internal_has_url()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LinkOpen::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LinkOpen::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LinkOpen::GetClassData() const { return &_class_data_; }


void LinkOpen::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LinkOpen*>(&to_msg);
  auto& from = static_cast<const LinkOpen&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.LinkOpen)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_url()) {
    _this->_internal_set_url(from._internal_url());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LinkOpen::CopyFrom(const LinkOpen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.LinkOpen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkOpen::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void LinkOpen::InternalSwap(LinkOpen* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LinkOpen::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[41]);
}

// ===================================================================

class UpdatePackageStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdatePackageStatus>()._impl_._has_bits_);
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

UpdatePackageStatus::UpdatePackageStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.UpdatePackageStatus)
}
UpdatePackageStatus::UpdatePackageStatus(const UpdatePackageStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdatePackageStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.package_name_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_package_name()) {
    _this->_impl_.package_name_.Set(from._internal_package_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.status_, &from._impl_.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.UpdatePackageStatus)
}

inline void UpdatePackageStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.package_name_){}
    , decltype(_impl_.status_){0}
    , decltype(_impl_.type_){0}
  };
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdatePackageStatus::~UpdatePackageStatus() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.UpdatePackageStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdatePackageStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.package_name_.Destroy();
}

void UpdatePackageStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdatePackageStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.UpdatePackageStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.package_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdatePackageStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string package_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_package_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.UpdatePackageStatus.package_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int32 status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_status(&has_bits);
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdatePackageStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.UpdatePackageStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string package_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_package_name().data(), static_cast<int>(this->_internal_package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.UpdatePackageStatus.package_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_package_name(), target);
  }

  // required int32 status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_status(), target);
  }

  // optional int32 type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.UpdatePackageStatus)
  return target;
}

size_t UpdatePackageStatus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cn.kylinos.kmre.kmrecore.UpdatePackageStatus)
  size_t total_size = 0;

  if (_internal_has_package_name()) {
    // required string package_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_name());
  }

  if (_internal_has_status()) {
    // required int32 status = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  return total_size;
}
size_t UpdatePackageStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.UpdatePackageStatus)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string package_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_name());

    // required int32 status = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 type = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdatePackageStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdatePackageStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdatePackageStatus::GetClassData() const { return &_class_data_; }


void UpdatePackageStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdatePackageStatus*>(&to_msg);
  auto& from = static_cast<const UpdatePackageStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.UpdatePackageStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_package_name(from._internal_package_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdatePackageStatus::CopyFrom(const UpdatePackageStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.UpdatePackageStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePackageStatus::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void UpdatePackageStatus::InternalSwap(UpdatePackageStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.package_name_, lhs_arena,
      &other->_impl_.package_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdatePackageStatus, _impl_.type_)
      + sizeof(UpdatePackageStatus::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(UpdatePackageStatus, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePackageStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[42]);
}

// ===================================================================

class SendSystemProp::_Internal {
 public:
  using HasBits = decltype(std::declval<SendSystemProp>()._impl_._has_bits_);
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value_field(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

SendSystemProp::SendSystemProp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.SendSystemProp)
}
SendSystemProp::SendSystemProp(const SendSystemProp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendSystemProp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_field_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.event_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value_field()) {
    _this->_impl_.value_field_.Set(from._internal_value_field(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.event_type_ = from._impl_.event_type_;
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.SendSystemProp)
}

inline void SendSystemProp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_field_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.event_type_){0}
  };
  _impl_.value_field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SendSystemProp::~SendSystemProp() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.SendSystemProp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendSystemProp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_field_.Destroy();
  _impl_.value_.Destroy();
}

void SendSystemProp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendSystemProp::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.SendSystemProp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.value_field_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.value_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.event_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendSystemProp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 event_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_event_type(&has_bits);
          _impl_.event_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string value_field = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value_field();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.SendSystemProp.value_field");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cn.kylinos.kmre.kmrecore.SendSystemProp.value");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendSystemProp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.SendSystemProp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 event_type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_event_type(), target);
  }

  // required string value_field = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value_field().data(), static_cast<int>(this->_internal_value_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.SendSystemProp.value_field");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value_field(), target);
  }

  // required string value = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cn.kylinos.kmre.kmrecore.SendSystemProp.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.SendSystemProp)
  return target;
}

size_t SendSystemProp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cn.kylinos.kmre.kmrecore.SendSystemProp)
  size_t total_size = 0;

  if (_internal_has_value_field()) {
    // required string value_field = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value_field());
  }

  if (_internal_has_value()) {
    // required string value = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (_internal_has_event_type()) {
    // required int32 event_type = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_event_type());
  }

  return total_size;
}
size_t SendSystemProp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.SendSystemProp)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string value_field = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value_field());

    // required string value = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());

    // required int32 event_type = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_event_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendSystemProp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendSystemProp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendSystemProp::GetClassData() const { return &_class_data_; }


void SendSystemProp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendSystemProp*>(&to_msg);
  auto& from = static_cast<const SendSystemProp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.SendSystemProp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_value_field(from._internal_value_field());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.event_type_ = from._impl_.event_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendSystemProp::CopyFrom(const SendSystemProp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.SendSystemProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendSystemProp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SendSystemProp::InternalSwap(SendSystemProp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_field_, lhs_arena,
      &other->_impl_.value_field_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  swap(_impl_.event_type_, other->_impl_.event_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendSystemProp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[43]);
}

// ===================================================================

class EventSequence::_Internal {
 public:
  using HasBits = decltype(std::declval<EventSequence>()._impl_._has_bits_);
  static const ::cn::kylinos::kmre::kmrecore::Notification& notification(const EventSequence* msg);
  static void set_has_notification(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cn::kylinos::kmre::kmrecore::EventInfo& event_info(const EventSequence* msg);
  static void set_has_event_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::cn::kylinos::kmre::kmrecore::LaunchResult& launch_result(const EventSequence* msg);
  static void set_has_launch_result(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::cn::kylinos::kmre::kmrecore::CloseResult& close_result(const EventSequence* msg);
  static void set_has_close_result(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::cn::kylinos::kmre::kmrecore::SetClipboard& set_clipboard(const EventSequence* msg);
  static void set_has_set_clipboard(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::cn::kylinos::kmre::kmrecore::VirtualScreenFocusResult& focus_result(const EventSequence* msg);
  static void set_has_focus_result(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::cn::kylinos::kmre::kmrecore::InputMethodRequest& inputmethod_request(const EventSequence* msg);
  static void set_has_inputmethod_request(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::cn::kylinos::kmre::kmrecore::FilesList& files_list(const EventSequence* msg);
  static void set_has_files_list(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::cn::kylinos::kmre::kmrecore::MediaPlayStatus& mediaplay_status(const EventSequence* msg);
  static void set_has_mediaplay_status(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::cn::kylinos::kmre::kmrecore::AppMultiplierList& app_multipliers(const EventSequence* msg);
  static void set_has_app_multipliers(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::cn::kylinos::kmre::kmrecore::ResponseInfo& response_info(const EventSequence* msg);
  static void set_has_response_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::cn::kylinos::kmre::kmrecore::MultiplierSwitch& multiplier_switch(const EventSequence* msg);
  static void set_has_multiplier_switch(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::cn::kylinos::kmre::kmrecore::LinkOpen& link_open(const EventSequence* msg);
  static void set_has_link_open(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::cn::kylinos::kmre::kmrecore::UpdatePackageStatus& update_package_status(const EventSequence* msg);
  static void set_has_update_package_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::cn::kylinos::kmre::kmrecore::SendSystemProp& system_prop(const EventSequence* msg);
  static void set_has_system_prop(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::cn::kylinos::kmre::kmrecore::GetInfoList& get_info_list(const EventSequence* msg);
  static void set_has_get_info_list(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::cn::kylinos::kmre::kmrecore::ContainerEnvBootStatus& container_env_boot_status(const EventSequence* msg);
  static void set_has_container_env_boot_status(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

const ::cn::kylinos::kmre::kmrecore::Notification&
EventSequence::_Internal::notification(const EventSequence* msg) {
  return *msg->_impl_.notification_;
}
const ::cn::kylinos::kmre::kmrecore::EventInfo&
EventSequence::_Internal::event_info(const EventSequence* msg) {
  return *msg->_impl_.event_info_;
}
const ::cn::kylinos::kmre::kmrecore::LaunchResult&
EventSequence::_Internal::launch_result(const EventSequence* msg) {
  return *msg->_impl_.launch_result_;
}
const ::cn::kylinos::kmre::kmrecore::CloseResult&
EventSequence::_Internal::close_result(const EventSequence* msg) {
  return *msg->_impl_.close_result_;
}
const ::cn::kylinos::kmre::kmrecore::SetClipboard&
EventSequence::_Internal::set_clipboard(const EventSequence* msg) {
  return *msg->_impl_.set_clipboard_;
}
const ::cn::kylinos::kmre::kmrecore::VirtualScreenFocusResult&
EventSequence::_Internal::focus_result(const EventSequence* msg) {
  return *msg->_impl_.focus_result_;
}
const ::cn::kylinos::kmre::kmrecore::InputMethodRequest&
EventSequence::_Internal::inputmethod_request(const EventSequence* msg) {
  return *msg->_impl_.inputmethod_request_;
}
const ::cn::kylinos::kmre::kmrecore::FilesList&
EventSequence::_Internal::files_list(const EventSequence* msg) {
  return *msg->_impl_.files_list_;
}
const ::cn::kylinos::kmre::kmrecore::MediaPlayStatus&
EventSequence::_Internal::mediaplay_status(const EventSequence* msg) {
  return *msg->_impl_.mediaplay_status_;
}
const ::cn::kylinos::kmre::kmrecore::AppMultiplierList&
EventSequence::_Internal::app_multipliers(const EventSequence* msg) {
  return *msg->_impl_.app_multipliers_;
}
const ::cn::kylinos::kmre::kmrecore::ResponseInfo&
EventSequence::_Internal::response_info(const EventSequence* msg) {
  return *msg->_impl_.response_info_;
}
const ::cn::kylinos::kmre::kmrecore::MultiplierSwitch&
EventSequence::_Internal::multiplier_switch(const EventSequence* msg) {
  return *msg->_impl_.multiplier_switch_;
}
const ::cn::kylinos::kmre::kmrecore::LinkOpen&
EventSequence::_Internal::link_open(const EventSequence* msg) {
  return *msg->_impl_.link_open_;
}
const ::cn::kylinos::kmre::kmrecore::UpdatePackageStatus&
EventSequence::_Internal::update_package_status(const EventSequence* msg) {
  return *msg->_impl_.update_package_status_;
}
const ::cn::kylinos::kmre::kmrecore::SendSystemProp&
EventSequence::_Internal::system_prop(const EventSequence* msg) {
  return *msg->_impl_.system_prop_;
}
const ::cn::kylinos::kmre::kmrecore::GetInfoList&
EventSequence::_Internal::get_info_list(const EventSequence* msg) {
  return *msg->_impl_.get_info_list_;
}
const ::cn::kylinos::kmre::kmrecore::ContainerEnvBootStatus&
EventSequence::_Internal::container_env_boot_status(const EventSequence* msg) {
  return *msg->_impl_.container_env_boot_status_;
}
EventSequence::EventSequence(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.kylinos.kmre.kmrecore.EventSequence)
}
EventSequence::EventSequence(const EventSequence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventSequence* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.notification_){nullptr}
    , decltype(_impl_.event_info_){nullptr}
    , decltype(_impl_.launch_result_){nullptr}
    , decltype(_impl_.close_result_){nullptr}
    , decltype(_impl_.set_clipboard_){nullptr}
    , decltype(_impl_.focus_result_){nullptr}
    , decltype(_impl_.inputmethod_request_){nullptr}
    , decltype(_impl_.files_list_){nullptr}
    , decltype(_impl_.mediaplay_status_){nullptr}
    , decltype(_impl_.app_multipliers_){nullptr}
    , decltype(_impl_.response_info_){nullptr}
    , decltype(_impl_.multiplier_switch_){nullptr}
    , decltype(_impl_.link_open_){nullptr}
    , decltype(_impl_.update_package_status_){nullptr}
    , decltype(_impl_.system_prop_){nullptr}
    , decltype(_impl_.get_info_list_){nullptr}
    , decltype(_impl_.container_env_boot_status_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_notification()) {
    _this->_impl_.notification_ = new ::cn::kylinos::kmre::kmrecore::Notification(*from._impl_.notification_);
  }
  if (from._internal_has_event_info()) {
    _this->_impl_.event_info_ = new ::cn::kylinos::kmre::kmrecore::EventInfo(*from._impl_.event_info_);
  }
  if (from._internal_has_launch_result()) {
    _this->_impl_.launch_result_ = new ::cn::kylinos::kmre::kmrecore::LaunchResult(*from._impl_.launch_result_);
  }
  if (from._internal_has_close_result()) {
    _this->_impl_.close_result_ = new ::cn::kylinos::kmre::kmrecore::CloseResult(*from._impl_.close_result_);
  }
  if (from._internal_has_set_clipboard()) {
    _this->_impl_.set_clipboard_ = new ::cn::kylinos::kmre::kmrecore::SetClipboard(*from._impl_.set_clipboard_);
  }
  if (from._internal_has_focus_result()) {
    _this->_impl_.focus_result_ = new ::cn::kylinos::kmre::kmrecore::VirtualScreenFocusResult(*from._impl_.focus_result_);
  }
  if (from._internal_has_inputmethod_request()) {
    _this->_impl_.inputmethod_request_ = new ::cn::kylinos::kmre::kmrecore::InputMethodRequest(*from._impl_.inputmethod_request_);
  }
  if (from._internal_has_files_list()) {
    _this->_impl_.files_list_ = new ::cn::kylinos::kmre::kmrecore::FilesList(*from._impl_.files_list_);
  }
  if (from._internal_has_mediaplay_status()) {
    _this->_impl_.mediaplay_status_ = new ::cn::kylinos::kmre::kmrecore::MediaPlayStatus(*from._impl_.mediaplay_status_);
  }
  if (from._internal_has_app_multipliers()) {
    _this->_impl_.app_multipliers_ = new ::cn::kylinos::kmre::kmrecore::AppMultiplierList(*from._impl_.app_multipliers_);
  }
  if (from._internal_has_response_info()) {
    _this->_impl_.response_info_ = new ::cn::kylinos::kmre::kmrecore::ResponseInfo(*from._impl_.response_info_);
  }
  if (from._internal_has_multiplier_switch()) {
    _this->_impl_.multiplier_switch_ = new ::cn::kylinos::kmre::kmrecore::MultiplierSwitch(*from._impl_.multiplier_switch_);
  }
  if (from._internal_has_link_open()) {
    _this->_impl_.link_open_ = new ::cn::kylinos::kmre::kmrecore::LinkOpen(*from._impl_.link_open_);
  }
  if (from._internal_has_update_package_status()) {
    _this->_impl_.update_package_status_ = new ::cn::kylinos::kmre::kmrecore::UpdatePackageStatus(*from._impl_.update_package_status_);
  }
  if (from._internal_has_system_prop()) {
    _this->_impl_.system_prop_ = new ::cn::kylinos::kmre::kmrecore::SendSystemProp(*from._impl_.system_prop_);
  }
  if (from._internal_has_get_info_list()) {
    _this->_impl_.get_info_list_ = new ::cn::kylinos::kmre::kmrecore::GetInfoList(*from._impl_.get_info_list_);
  }
  if (from._internal_has_container_env_boot_status()) {
    _this->_impl_.container_env_boot_status_ = new ::cn::kylinos::kmre::kmrecore::ContainerEnvBootStatus(*from._impl_.container_env_boot_status_);
  }
  // @@protoc_insertion_point(copy_constructor:cn.kylinos.kmre.kmrecore.EventSequence)
}

inline void EventSequence::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.notification_){nullptr}
    , decltype(_impl_.event_info_){nullptr}
    , decltype(_impl_.launch_result_){nullptr}
    , decltype(_impl_.close_result_){nullptr}
    , decltype(_impl_.set_clipboard_){nullptr}
    , decltype(_impl_.focus_result_){nullptr}
    , decltype(_impl_.inputmethod_request_){nullptr}
    , decltype(_impl_.files_list_){nullptr}
    , decltype(_impl_.mediaplay_status_){nullptr}
    , decltype(_impl_.app_multipliers_){nullptr}
    , decltype(_impl_.response_info_){nullptr}
    , decltype(_impl_.multiplier_switch_){nullptr}
    , decltype(_impl_.link_open_){nullptr}
    , decltype(_impl_.update_package_status_){nullptr}
    , decltype(_impl_.system_prop_){nullptr}
    , decltype(_impl_.get_info_list_){nullptr}
    , decltype(_impl_.container_env_boot_status_){nullptr}
  };
}

EventSequence::~EventSequence() {
  // @@protoc_insertion_point(destructor:cn.kylinos.kmre.kmrecore.EventSequence)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventSequence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.notification_;
  if (this != internal_default_instance()) delete _impl_.event_info_;
  if (this != internal_default_instance()) delete _impl_.launch_result_;
  if (this != internal_default_instance()) delete _impl_.close_result_;
  if (this != internal_default_instance()) delete _impl_.set_clipboard_;
  if (this != internal_default_instance()) delete _impl_.focus_result_;
  if (this != internal_default_instance()) delete _impl_.inputmethod_request_;
  if (this != internal_default_instance()) delete _impl_.files_list_;
  if (this != internal_default_instance()) delete _impl_.mediaplay_status_;
  if (this != internal_default_instance()) delete _impl_.app_multipliers_;
  if (this != internal_default_instance()) delete _impl_.response_info_;
  if (this != internal_default_instance()) delete _impl_.multiplier_switch_;
  if (this != internal_default_instance()) delete _impl_.link_open_;
  if (this != internal_default_instance()) delete _impl_.update_package_status_;
  if (this != internal_default_instance()) delete _impl_.system_prop_;
  if (this != internal_default_instance()) delete _impl_.get_info_list_;
  if (this != internal_default_instance()) delete _impl_.container_env_boot_status_;
}

void EventSequence::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventSequence::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.kylinos.kmre.kmrecore.EventSequence)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.notification_ != nullptr);
      _impl_.notification_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.event_info_ != nullptr);
      _impl_.event_info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.launch_result_ != nullptr);
      _impl_.launch_result_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.close_result_ != nullptr);
      _impl_.close_result_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.set_clipboard_ != nullptr);
      _impl_.set_clipboard_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.focus_result_ != nullptr);
      _impl_.focus_result_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.inputmethod_request_ != nullptr);
      _impl_.inputmethod_request_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.files_list_ != nullptr);
      _impl_.files_list_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.mediaplay_status_ != nullptr);
      _impl_.mediaplay_status_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.app_multipliers_ != nullptr);
      _impl_.app_multipliers_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.response_info_ != nullptr);
      _impl_.response_info_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.multiplier_switch_ != nullptr);
      _impl_.multiplier_switch_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.link_open_ != nullptr);
      _impl_.link_open_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.update_package_status_ != nullptr);
      _impl_.update_package_status_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.system_prop_ != nullptr);
      _impl_.system_prop_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.get_info_list_ != nullptr);
      _impl_.get_info_list_->Clear();
    }
  }
  if (cached_has_bits & 0x00010000u) {
    GOOGLE_DCHECK(_impl_.container_env_boot_status_ != nullptr);
    _impl_.container_env_boot_status_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventSequence::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .cn.kylinos.kmre.kmrecore.Notification notification = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_notification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .cn.kylinos.kmre.kmrecore.EventInfo event_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_event_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .cn.kylinos.kmre.kmrecore.LaunchResult launch_result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_launch_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .cn.kylinos.kmre.kmrecore.CloseResult close_result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_close_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .cn.kylinos.kmre.kmrecore.SetClipboard set_clipboard = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_clipboard(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .cn.kylinos.kmre.kmrecore.VirtualScreenFocusResult focus_result = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_focus_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .cn.kylinos.kmre.kmrecore.InputMethodRequest inputmethod_request = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_inputmethod_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .cn.kylinos.kmre.kmrecore.FilesList files_list = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_files_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .cn.kylinos.kmre.kmrecore.MediaPlayStatus mediaplay_status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_mediaplay_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .cn.kylinos.kmre.kmrecore.AppMultiplierList app_multipliers = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_multipliers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .cn.kylinos.kmre.kmrecore.ResponseInfo response_info = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_response_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .cn.kylinos.kmre.kmrecore.MultiplierSwitch multiplier_switch = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_multiplier_switch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .cn.kylinos.kmre.kmrecore.LinkOpen link_open = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_link_open(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .cn.kylinos.kmre.kmrecore.UpdatePackageStatus update_package_status = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_package_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .cn.kylinos.kmre.kmrecore.SendSystemProp system_prop = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_system_prop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .cn.kylinos.kmre.kmrecore.GetInfoList get_info_list = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_info_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .cn.kylinos.kmre.kmrecore.ContainerEnvBootStatus container_env_boot_status = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_container_env_boot_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EventSequence::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.kylinos.kmre.kmrecore.EventSequence)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .cn.kylinos.kmre.kmrecore.Notification notification = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::notification(this),
        _Internal::notification(this).GetCachedSize(), target, stream);
  }

  // optional .cn.kylinos.kmre.kmrecore.EventInfo event_info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::event_info(this),
        _Internal::event_info(this).GetCachedSize(), target, stream);
  }

  // optional .cn.kylinos.kmre.kmrecore.LaunchResult launch_result = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::launch_result(this),
        _Internal::launch_result(this).GetCachedSize(), target, stream);
  }

  // optional .cn.kylinos.kmre.kmrecore.CloseResult close_result = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::close_result(this),
        _Internal::close_result(this).GetCachedSize(), target, stream);
  }

  // optional .cn.kylinos.kmre.kmrecore.SetClipboard set_clipboard = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::set_clipboard(this),
        _Internal::set_clipboard(this).GetCachedSize(), target, stream);
  }

  // optional .cn.kylinos.kmre.kmrecore.VirtualScreenFocusResult focus_result = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::focus_result(this),
        _Internal::focus_result(this).GetCachedSize(), target, stream);
  }

  // optional .cn.kylinos.kmre.kmrecore.InputMethodRequest inputmethod_request = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::inputmethod_request(this),
        _Internal::inputmethod_request(this).GetCachedSize(), target, stream);
  }

  // optional .cn.kylinos.kmre.kmrecore.FilesList files_list = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::files_list(this),
        _Internal::files_list(this).GetCachedSize(), target, stream);
  }

  // optional .cn.kylinos.kmre.kmrecore.MediaPlayStatus mediaplay_status = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::mediaplay_status(this),
        _Internal::mediaplay_status(this).GetCachedSize(), target, stream);
  }

  // optional .cn.kylinos.kmre.kmrecore.AppMultiplierList app_multipliers = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::app_multipliers(this),
        _Internal::app_multipliers(this).GetCachedSize(), target, stream);
  }

  // optional .cn.kylinos.kmre.kmrecore.ResponseInfo response_info = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::response_info(this),
        _Internal::response_info(this).GetCachedSize(), target, stream);
  }

  // optional .cn.kylinos.kmre.kmrecore.MultiplierSwitch multiplier_switch = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::multiplier_switch(this),
        _Internal::multiplier_switch(this).GetCachedSize(), target, stream);
  }

  // optional .cn.kylinos.kmre.kmrecore.LinkOpen link_open = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::link_open(this),
        _Internal::link_open(this).GetCachedSize(), target, stream);
  }

  // optional .cn.kylinos.kmre.kmrecore.UpdatePackageStatus update_package_status = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::update_package_status(this),
        _Internal::update_package_status(this).GetCachedSize(), target, stream);
  }

  // optional .cn.kylinos.kmre.kmrecore.SendSystemProp system_prop = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::system_prop(this),
        _Internal::system_prop(this).GetCachedSize(), target, stream);
  }

  // optional .cn.kylinos.kmre.kmrecore.GetInfoList get_info_list = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::get_info_list(this),
        _Internal::get_info_list(this).GetCachedSize(), target, stream);
  }

  // optional .cn.kylinos.kmre.kmrecore.ContainerEnvBootStatus container_env_boot_status = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::container_env_boot_status(this),
        _Internal::container_env_boot_status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.kylinos.kmre.kmrecore.EventSequence)
  return target;
}

size_t EventSequence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.kylinos.kmre.kmrecore.EventSequence)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .cn.kylinos.kmre.kmrecore.Notification notification = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.notification_);
    }

    // optional .cn.kylinos.kmre.kmrecore.EventInfo event_info = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_info_);
    }

    // optional .cn.kylinos.kmre.kmrecore.LaunchResult launch_result = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.launch_result_);
    }

    // optional .cn.kylinos.kmre.kmrecore.CloseResult close_result = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.close_result_);
    }

    // optional .cn.kylinos.kmre.kmrecore.SetClipboard set_clipboard = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.set_clipboard_);
    }

    // optional .cn.kylinos.kmre.kmrecore.VirtualScreenFocusResult focus_result = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.focus_result_);
    }

    // optional .cn.kylinos.kmre.kmrecore.InputMethodRequest inputmethod_request = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.inputmethod_request_);
    }

    // optional .cn.kylinos.kmre.kmrecore.FilesList files_list = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.files_list_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .cn.kylinos.kmre.kmrecore.MediaPlayStatus mediaplay_status = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mediaplay_status_);
    }

    // optional .cn.kylinos.kmre.kmrecore.AppMultiplierList app_multipliers = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.app_multipliers_);
    }

    // optional .cn.kylinos.kmre.kmrecore.ResponseInfo response_info = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_info_);
    }

    // optional .cn.kylinos.kmre.kmrecore.MultiplierSwitch multiplier_switch = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.multiplier_switch_);
    }

    // optional .cn.kylinos.kmre.kmrecore.LinkOpen link_open = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.link_open_);
    }

    // optional .cn.kylinos.kmre.kmrecore.UpdatePackageStatus update_package_status = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.update_package_status_);
    }

    // optional .cn.kylinos.kmre.kmrecore.SendSystemProp system_prop = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.system_prop_);
    }

    // optional .cn.kylinos.kmre.kmrecore.GetInfoList get_info_list = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.get_info_list_);
    }

  }
  // optional .cn.kylinos.kmre.kmrecore.ContainerEnvBootStatus container_env_boot_status = 17;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.container_env_boot_status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventSequence::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventSequence::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventSequence::GetClassData() const { return &_class_data_; }


void EventSequence::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventSequence*>(&to_msg);
  auto& from = static_cast<const EventSequence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.kylinos.kmre.kmrecore.EventSequence)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_notification()->::cn::kylinos::kmre::kmrecore::Notification::MergeFrom(
          from._internal_notification());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_event_info()->::cn::kylinos::kmre::kmrecore::EventInfo::MergeFrom(
          from._internal_event_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_launch_result()->::cn::kylinos::kmre::kmrecore::LaunchResult::MergeFrom(
          from._internal_launch_result());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_close_result()->::cn::kylinos::kmre::kmrecore::CloseResult::MergeFrom(
          from._internal_close_result());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_set_clipboard()->::cn::kylinos::kmre::kmrecore::SetClipboard::MergeFrom(
          from._internal_set_clipboard());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_focus_result()->::cn::kylinos::kmre::kmrecore::VirtualScreenFocusResult::MergeFrom(
          from._internal_focus_result());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_inputmethod_request()->::cn::kylinos::kmre::kmrecore::InputMethodRequest::MergeFrom(
          from._internal_inputmethod_request());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_files_list()->::cn::kylinos::kmre::kmrecore::FilesList::MergeFrom(
          from._internal_files_list());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_mediaplay_status()->::cn::kylinos::kmre::kmrecore::MediaPlayStatus::MergeFrom(
          from._internal_mediaplay_status());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_app_multipliers()->::cn::kylinos::kmre::kmrecore::AppMultiplierList::MergeFrom(
          from._internal_app_multipliers());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_response_info()->::cn::kylinos::kmre::kmrecore::ResponseInfo::MergeFrom(
          from._internal_response_info());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_multiplier_switch()->::cn::kylinos::kmre::kmrecore::MultiplierSwitch::MergeFrom(
          from._internal_multiplier_switch());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_link_open()->::cn::kylinos::kmre::kmrecore::LinkOpen::MergeFrom(
          from._internal_link_open());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_update_package_status()->::cn::kylinos::kmre::kmrecore::UpdatePackageStatus::MergeFrom(
          from._internal_update_package_status());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_system_prop()->::cn::kylinos::kmre::kmrecore::SendSystemProp::MergeFrom(
          from._internal_system_prop());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_get_info_list()->::cn::kylinos::kmre::kmrecore::GetInfoList::MergeFrom(
          from._internal_get_info_list());
    }
  }
  if (cached_has_bits & 0x00010000u) {
    _this->_internal_mutable_container_env_boot_status()->::cn::kylinos::kmre::kmrecore::ContainerEnvBootStatus::MergeFrom(
        from._internal_container_env_boot_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventSequence::CopyFrom(const EventSequence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.kylinos.kmre.kmrecore.EventSequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventSequence::IsInitialized() const {
  if (_internal_has_notification()) {
    if (!_impl_.notification_->IsInitialized()) return false;
  }
  if (_internal_has_event_info()) {
    if (!_impl_.event_info_->IsInitialized()) return false;
  }
  if (_internal_has_launch_result()) {
    if (!_impl_.launch_result_->IsInitialized()) return false;
  }
  if (_internal_has_close_result()) {
    if (!_impl_.close_result_->IsInitialized()) return false;
  }
  if (_internal_has_set_clipboard()) {
    if (!_impl_.set_clipboard_->IsInitialized()) return false;
  }
  if (_internal_has_focus_result()) {
    if (!_impl_.focus_result_->IsInitialized()) return false;
  }
  if (_internal_has_inputmethod_request()) {
    if (!_impl_.inputmethod_request_->IsInitialized()) return false;
  }
  if (_internal_has_files_list()) {
    if (!_impl_.files_list_->IsInitialized()) return false;
  }
  if (_internal_has_mediaplay_status()) {
    if (!_impl_.mediaplay_status_->IsInitialized()) return false;
  }
  if (_internal_has_app_multipliers()) {
    if (!_impl_.app_multipliers_->IsInitialized()) return false;
  }
  if (_internal_has_response_info()) {
    if (!_impl_.response_info_->IsInitialized()) return false;
  }
  if (_internal_has_multiplier_switch()) {
    if (!_impl_.multiplier_switch_->IsInitialized()) return false;
  }
  if (_internal_has_link_open()) {
    if (!_impl_.link_open_->IsInitialized()) return false;
  }
  if (_internal_has_update_package_status()) {
    if (!_impl_.update_package_status_->IsInitialized()) return false;
  }
  if (_internal_has_system_prop()) {
    if (!_impl_.system_prop_->IsInitialized()) return false;
  }
  if (_internal_has_get_info_list()) {
    if (!_impl_.get_info_list_->IsInitialized()) return false;
  }
  if (_internal_has_container_env_boot_status()) {
    if (!_impl_.container_env_boot_status_->IsInitialized()) return false;
  }
  return true;
}

void EventSequence::InternalSwap(EventSequence* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventSequence, _impl_.container_env_boot_status_)
      + sizeof(EventSequence::_impl_.container_env_boot_status_)
      - PROTOBUF_FIELD_OFFSET(EventSequence, _impl_.notification_)>(
          reinterpret_cast<char*>(&_impl_.notification_),
          reinterpret_cast<char*>(&other->_impl_.notification_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventSequence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KmreCore_2eproto_getter, &descriptor_table_KmreCore_2eproto_once,
      file_level_metadata_KmreCore_2eproto[44]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace kmrecore
}  // namespace kmre
}  // namespace kylinos
}  // namespace cn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::InstallApp*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::InstallApp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::InstallApp >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::UninstallApp*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::UninstallApp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::UninstallApp >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::LaunchApp*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::LaunchApp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::LaunchApp >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::CloseApp*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::CloseApp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::CloseApp >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::GetInstalledAppList*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::GetInstalledAppList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::GetInstalledAppList >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::GetRunningAppList*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::GetRunningAppList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::GetRunningAppList >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::SetClipboard*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::SetClipboard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::SetClipboard >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::FocusWin*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::FocusWin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::FocusWin >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::ControlApp*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::ControlApp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::ControlApp >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::InsertFile*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::InsertFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::InsertFile >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::RemoveFile*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::RemoveFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::RemoveFile >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::RequestMediaFiles*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::RequestMediaFiles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::RequestMediaFiles >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::DragFile*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::DragFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::DragFile >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::RotationChanged*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::RotationChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::RotationChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::SetSystemProp*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::SetSystemProp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::SetSystemProp >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::GetSystemProp*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::GetSystemProp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::GetSystemProp >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::UpdateAppWindowSize*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::UpdateAppWindowSize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::UpdateAppWindowSize >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::SetProxy*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::SetProxy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::SetProxy >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::UpdateDisplaySize*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::UpdateDisplaySize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::UpdateDisplaySize >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::AnswerCall*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::AnswerCall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::AnswerCall >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::ContainerEnvBootStatus*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::ContainerEnvBootStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::ContainerEnvBootStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::ActionResult*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::ActionResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::ActionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::EventInfo*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::EventInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::EventInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::InstalledAppItem*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::InstalledAppItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::InstalledAppItem >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::InstalledAppList*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::InstalledAppList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::InstalledAppList >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::RunningAppItem*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::RunningAppItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::RunningAppItem >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::RunningAppList*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::RunningAppList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::RunningAppList >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::Notification*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::LaunchResult*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::LaunchResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::LaunchResult >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::CloseResult*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::CloseResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::CloseResult >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::VirtualScreenFocusResult*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::VirtualScreenFocusResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::VirtualScreenFocusResult >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::InputMethodRequest*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::InputMethodRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::InputMethodRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::SingleFile*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::SingleFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::SingleFile >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::FilesList*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::FilesList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::FilesList >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::MediaPlayStatus*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::MediaPlayStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::MediaPlayStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::AppMultiplier*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::AppMultiplier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::AppMultiplier >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::AppMultiplierList*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::AppMultiplierList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::AppMultiplierList >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::Info*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::Info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::Info >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::GetInfoList*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::GetInfoList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::GetInfoList >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::ResponseInfo*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::ResponseInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::ResponseInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::MultiplierSwitch*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::MultiplierSwitch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::MultiplierSwitch >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::LinkOpen*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::LinkOpen >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::LinkOpen >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::UpdatePackageStatus*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::UpdatePackageStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::UpdatePackageStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::SendSystemProp*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::SendSystemProp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::SendSystemProp >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::kylinos::kmre::kmrecore::EventSequence*
Arena::CreateMaybeMessage< ::cn::kylinos::kmre::kmrecore::EventSequence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::kylinos::kmre::kmrecore::EventSequence >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
